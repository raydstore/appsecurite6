
import { AppError } from '../../common/app-error';
import { BadInput } from './../../common/bad-input';
import { NotFoundError } from '../../common/not-found-error';
import { LabelService } from '../../services/label.service';
import { OnInit, Component } from '@angular/core';
import { Http, Response } from '@angular/http';
import { Label } from '../../table/table';

@Component({
    selector: 'app-labels',
    templateUrl: './labels.component.html',
    styleUrls: ['./labels.component.css']
})
export class LabelsComponent implements OnInit {
    label: Label;
    newLabel: any;
    labels: any[];
    labelForm: Boolean = false;
    isNewForm: Boolean;

    constructor(private service: LabelService) {
    }

    ngOnInit() {
        this.service.getAll()
            .subscribe(labels => this.labels = labels);
    }

    createLabel() {
        // let label = { title: input.value };
        this.labels.splice(0, 0, this.newLabel);
        this.service.create(this.newLabel)
            .subscribe(newlabel => {
               // this.label['id'] = newlabel.id;
            }, (error: AppError) => {
                this.labels.splice(0, 1);

                if (error instanceof BadInput) {
                    // this.form.setErrors(originalError);
                } else {
                    throw error;
                }
            });
    }

    updateLabel() {
        this.service.update(this.newLabel)
            .subscribe(updatelabel => {
                console.log(updatelabel);
            })
    }

    deleteLabel(label) {
        let index = this.labels.indexOf(label);
        this.labels.splice(index, 1);
        this.service.delete(label.id)
            .subscribe(
            null,
            (error: Response) => {
                this.labels.splice(index, 0, label);
                if (error instanceof NotFoundError) {
                  alert('this label has already been deleted');
                } else {
                    throw error;
                }
            })
    }

    showEditLabelForm(label: Label){
       if (!label) {
           this.labelForm = false;
           return;
       }
       this.labelForm = true;
       this.isNewForm = false;
       this.newLabel = label;
    }

    showAddLabelForm() {
      if (this.labels.length) {
          this.newLabel = {};
      }
      this.labelForm = true;
      this.isNewForm = true;
    }

    saveLabelForm() {
       if (this.isNewForm) {
          this.createLabel();
       } else {
         this.updateLabel();
       }
    }

}

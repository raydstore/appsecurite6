{"remainingRequest":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Development\\AngularProject\\appsecurite6\\node_modules\\primeng\\components\\calendar\\calendar.js","dependencies":[{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\primeng\\components\\calendar\\calendar.js","mtime":1563198750741},{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1563198691178},{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1563198608965}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar button_1 = require(\"../button/button\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar shared_1 = require(\"../common/shared\");\nvar forms_1 = require(\"@angular/forms\");\nexports.CALENDAR_VALUE_ACCESSOR = {\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return Calendar; }),\n    multi: true\n};\nvar Calendar = /** @class */ /*@__PURE__*/ (function () {\n    function Calendar(el, domHandler, renderer, cd) {\n        this.el = el;\n        this.domHandler = domHandler;\n        this.renderer = renderer;\n        this.cd = cd;\n        this.dateFormat = 'mm/dd/yy';\n        this.inline = false;\n        this.showOtherMonths = true;\n        this.icon = 'pi pi-calendar';\n        this.shortYearCutoff = '+10';\n        this.hourFormat = '24';\n        this.stepHour = 1;\n        this.stepMinute = 1;\n        this.stepSecond = 1;\n        this.showSeconds = false;\n        this.showOnFocus = true;\n        this.dataType = 'date';\n        this.selectionMode = 'single';\n        this.todayButtonStyleClass = 'ui-button-secondary';\n        this.clearButtonStyleClass = 'ui-button-secondary';\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.keepInvalid = false;\n        this.hideOnDateTimeSelect = false;\n        this.numberOfMonths = 1;\n        this.view = 'date';\n        this.onFocus = new core_1.EventEmitter();\n        this.onBlur = new core_1.EventEmitter();\n        this.onClose = new core_1.EventEmitter();\n        this.onSelect = new core_1.EventEmitter();\n        this.onInput = new core_1.EventEmitter();\n        this.onTodayClick = new core_1.EventEmitter();\n        this.onClearClick = new core_1.EventEmitter();\n        this.onMonthChange = new core_1.EventEmitter();\n        this.onYearChange = new core_1.EventEmitter();\n        this._locale = {\n            firstDayOfWeek: 0,\n            dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n            dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n            dayNamesMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n            monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n            monthNamesShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n            today: 'Today',\n            clear: 'Clear'\n        };\n        this.onModelChange = function () { };\n        this.onModelTouched = function () { };\n        this.inputFieldValue = null;\n    }\n    Object.defineProperty(Calendar.prototype, \"utc\", {\n        get: function () {\n            return this._utc;\n        },\n        set: function (_utc) {\n            this._utc = _utc;\n            console.log(\"Setting utc has no effect as built-in UTC support is dropped.\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Calendar.prototype, \"minDate\", {\n        get: function () {\n            return this._minDate;\n        },\n        set: function (date) {\n            this._minDate = date;\n            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {\n                this.createMonths(this.currentMonth, this.currentYear);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Calendar.prototype, \"maxDate\", {\n        get: function () {\n            return this._maxDate;\n        },\n        set: function (date) {\n            this._maxDate = date;\n            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {\n                this.createMonths(this.currentMonth, this.currentYear);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Calendar.prototype, \"disabledDates\", {\n        get: function () {\n            return this._disabledDates;\n        },\n        set: function (disabledDates) {\n            this._disabledDates = disabledDates;\n            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {\n                this.createMonths(this.currentMonth, this.currentYear);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Calendar.prototype, \"disabledDays\", {\n        get: function () {\n            return this._disabledDays;\n        },\n        set: function (disabledDays) {\n            this._disabledDays = disabledDays;\n            if (this.currentMonth != undefined && this.currentMonth != null && this.currentYear) {\n                this.createMonths(this.currentMonth, this.currentYear);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Calendar.prototype, \"showTime\", {\n        get: function () {\n            return this._showTime;\n        },\n        set: function (showTime) {\n            this._showTime = showTime;\n            if (this.currentHour === undefined) {\n                this.initTime(this.value || new Date());\n            }\n            this.updateInputfield();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Calendar.prototype, \"locale\", {\n        get: function () {\n            return this._locale;\n        },\n        set: function (newLocale) {\n            this._locale = newLocale;\n            this.createWeekDays();\n            this.createMonths(this.currentMonth, this.currentYear);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Calendar.prototype.ngOnInit = function () {\n        var date = this.defaultDate || new Date();\n        this.currentMonth = date.getMonth();\n        this.currentYear = date.getFullYear();\n        if (this.yearNavigator && this.yearRange) {\n            this.yearOptions = [];\n            var years = this.yearRange.split(':'), yearStart = parseInt(years[0]), yearEnd = parseInt(years[1]);\n            for (var i = yearStart; i <= yearEnd; i++) {\n                this.yearOptions.push(i);\n            }\n        }\n        if (this.view === 'date') {\n            this.createWeekDays();\n            this.initTime(date);\n            this.createMonths(this.currentMonth, this.currentYear);\n            this.ticksTo1970 = (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000);\n        }\n        else if (this.view === 'month') {\n            this.monthPickerValues = [];\n            for (var i = 0; i <= 11; i++) {\n                this.monthPickerValues.push(this.locale.monthNamesShort[i]);\n            }\n        }\n    };\n    Calendar.prototype.ngAfterViewInit = function () {\n        if (!this.inline && this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlayViewChild.nativeElement);\n            else\n                this.domHandler.appendChild(this.overlayViewChild.nativeElement, this.appendTo);\n        }\n    };\n    Calendar.prototype.ngAfterViewChecked = function () {\n        if (this.overlayShown) {\n            this.alignOverlay();\n            this.overlayShown = false;\n        }\n    };\n    Calendar.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'date':\n                    _this.dateTemplate = item.template;\n                    break;\n                default:\n                    _this.dateTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    Calendar.prototype.createWeekDays = function () {\n        this.weekDays = [];\n        var dayIndex = this.locale.firstDayOfWeek;\n        for (var i = 0; i < 7; i++) {\n            this.weekDays.push(this.locale.dayNamesMin[dayIndex]);\n            dayIndex = (dayIndex == 6) ? 0 : ++dayIndex;\n        }\n    };\n    Calendar.prototype.createMonths = function (month, year) {\n        this.months = this.months = [];\n        for (var i = 0; i < this.numberOfMonths; i++) {\n            var m = month + i;\n            var y = year;\n            if (m > 11) {\n                m = m % 11 - 1;\n                y = year + 1;\n            }\n            this.months.push(this.createMonth(m, y));\n        }\n    };\n    Calendar.prototype.createMonth = function (month, year) {\n        var dates = [];\n        var firstDay = this.getFirstDayOfMonthIndex(month, year);\n        var daysLength = this.getDaysCountInMonth(month, year);\n        var prevMonthDaysLength = this.getDaysCountInPrevMonth(month, year);\n        var sundayIndex = this.getSundayIndex();\n        var dayNo = 1;\n        var today = new Date();\n        for (var i = 0; i < 6; i++) {\n            var week = [];\n            if (i == 0) {\n                for (var j = (prevMonthDaysLength - firstDay + 1); j <= prevMonthDaysLength; j++) {\n                    var prev = this.getPreviousMonthAndYear(month, year);\n                    week.push({ day: j, month: prev.month, year: prev.year, otherMonth: true,\n                        today: this.isToday(today, j, prev.month, prev.year), selectable: this.isSelectable(j, prev.month, prev.year) });\n                }\n                var remainingDaysLength = 7 - week.length;\n                for (var j = 0; j < remainingDaysLength; j++) {\n                    week.push({ day: dayNo, month: month, year: year, today: this.isToday(today, dayNo, month, year),\n                        selectable: this.isSelectable(dayNo, month, year) });\n                    dayNo++;\n                }\n            }\n            else {\n                for (var j = 0; j < 7; j++) {\n                    if (dayNo > daysLength) {\n                        var next = this.getNextMonthAndYear(month, year);\n                        week.push({ day: dayNo - daysLength, month: next.month, year: next.year, otherMonth: true,\n                            today: this.isToday(today, dayNo - daysLength, next.month, next.year),\n                            selectable: this.isSelectable((dayNo - daysLength), next.month, next.year) });\n                    }\n                    else {\n                        week.push({ day: dayNo, month: month, year: year, today: this.isToday(today, dayNo, month, year),\n                            selectable: this.isSelectable(dayNo, month, year) });\n                    }\n                    dayNo++;\n                }\n            }\n            dates.push(week);\n        }\n        return {\n            month: month,\n            year: year,\n            dates: dates\n        };\n    };\n    Calendar.prototype.initTime = function (date) {\n        this.pm = date.getHours() > 11;\n        if (this.showTime) {\n            this.currentMinute = date.getMinutes();\n            this.currentSecond = date.getSeconds();\n            if (this.hourFormat == '12')\n                this.currentHour = date.getHours() == 0 ? 12 : date.getHours() % 12;\n            else\n                this.currentHour = date.getHours();\n        }\n        else if (this.timeOnly) {\n            this.currentMinute = 0;\n            this.currentHour = 0;\n            this.currentSecond = 0;\n        }\n    };\n    Calendar.prototype.navBackward = function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n            return;\n        }\n        if (this.view === 'month') {\n            this.decrementYear();\n        }\n        else {\n            if (this.currentMonth === 0) {\n                this.currentMonth = 11;\n                this.decrementYear();\n            }\n            else {\n                this.currentMonth--;\n            }\n            this.onMonthChange.emit({ month: this.currentMonth + 1, year: this.currentYear });\n            this.createMonths(this.currentMonth, this.currentYear);\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.navForward = function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n            return;\n        }\n        if (this.view === 'month') {\n            this.incrementYear();\n        }\n        else {\n            if (this.currentMonth === 11) {\n                this.currentMonth = 0;\n                this.incrementYear();\n            }\n            else {\n                this.currentMonth++;\n            }\n            this.onMonthChange.emit({ month: this.currentMonth + 1, year: this.currentYear });\n            this.createMonths(this.currentMonth, this.currentYear);\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.decrementYear = function () {\n        this.currentYear--;\n        if (this.yearNavigator && this.currentYear < this.yearOptions[0]) {\n            this.currentYear = this.yearOptions[this.yearOptions.length - 1];\n        }\n    };\n    Calendar.prototype.incrementYear = function () {\n        this.currentYear++;\n        if (this.yearNavigator && this.currentYear > this.yearOptions[this.yearOptions.length - 1]) {\n            this.currentYear = this.yearOptions[0];\n        }\n    };\n    Calendar.prototype.onDateSelect = function (event, dateMeta) {\n        var _this = this;\n        if (this.disabled || !dateMeta.selectable) {\n            event.preventDefault();\n            return;\n        }\n        if (this.isMultipleSelection() && this.isSelected(dateMeta)) {\n            this.value = this.value.filter(function (date, i) {\n                return !_this.isDateEquals(date, dateMeta);\n            });\n            this.updateModel(this.value);\n        }\n        else {\n            if (this.shouldSelectDate(dateMeta)) {\n                if (dateMeta.otherMonth) {\n                    if (this.selectOtherMonths) {\n                        this.currentMonth = dateMeta.month;\n                        this.currentYear = dateMeta.year;\n                        this.createMonths(this.currentMonth, this.currentYear);\n                        this.selectDate(dateMeta);\n                    }\n                }\n                else {\n                    this.selectDate(dateMeta);\n                }\n            }\n        }\n        if (this.isSingleSelection() && (!this.showTime || this.hideOnDateTimeSelect)) {\n            this.overlayVisible = false;\n            if (this.mask) {\n                this.disableModality();\n            }\n        }\n        this.updateInputfield();\n        event.preventDefault();\n    };\n    Calendar.prototype.shouldSelectDate = function (dateMeta) {\n        if (this.isMultipleSelection())\n            return !this.maxDateCount || !this.value || this.maxDateCount > this.value.length;\n        else\n            return true;\n    };\n    Calendar.prototype.onMonthSelect = function (event, index) {\n        this.onDateSelect(event, { year: this.currentYear, month: index, day: 1, selectable: true });\n    };\n    Calendar.prototype.updateInputfield = function () {\n        var formattedValue = '';\n        if (this.value) {\n            if (this.isSingleSelection()) {\n                formattedValue = this.formatDateTime(this.value);\n            }\n            else if (this.isMultipleSelection()) {\n                for (var i = 0; i < this.value.length; i++) {\n                    var dateAsString = this.formatDateTime(this.value[i]);\n                    formattedValue += dateAsString;\n                    if (i !== (this.value.length - 1)) {\n                        formattedValue += ', ';\n                    }\n                }\n            }\n            else if (this.isRangeSelection()) {\n                if (this.value && this.value.length) {\n                    var startDate = this.value[0];\n                    var endDate = this.value[1];\n                    formattedValue = this.formatDateTime(startDate);\n                    if (endDate) {\n                        formattedValue += ' - ' + this.formatDateTime(endDate);\n                    }\n                }\n            }\n        }\n        this.inputFieldValue = formattedValue;\n        this.updateFilledState();\n        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n            this.inputfieldViewChild.nativeElement.value = this.inputFieldValue;\n        }\n    };\n    Calendar.prototype.formatDateTime = function (date) {\n        var formattedValue = null;\n        if (date) {\n            if (this.timeOnly) {\n                formattedValue = this.formatTime(date);\n            }\n            else {\n                formattedValue = this.formatDate(date, this.dateFormat);\n                if (this.showTime) {\n                    formattedValue += ' ' + this.formatTime(date);\n                }\n            }\n        }\n        return formattedValue;\n    };\n    Calendar.prototype.selectDate = function (dateMeta) {\n        var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);\n        if (this.showTime) {\n            if (this.hourFormat === '12' && this.pm && this.currentHour != 12)\n                date.setHours(this.currentHour + 12);\n            else\n                date.setHours(this.currentHour);\n            date.setMinutes(this.currentMinute);\n            date.setSeconds(this.currentSecond);\n        }\n        if (this.minDate && this.minDate > date) {\n            date = this.minDate;\n            this.currentHour = date.getHours();\n            this.currentMinute = date.getMinutes();\n            this.currentSecond = date.getSeconds();\n        }\n        if (this.maxDate && this.maxDate < date) {\n            date = this.maxDate;\n            this.currentHour = date.getHours();\n            this.currentMinute = date.getMinutes();\n            this.currentSecond = date.getSeconds();\n        }\n        if (this.isSingleSelection()) {\n            this.updateModel(date);\n        }\n        else if (this.isMultipleSelection()) {\n            this.updateModel(this.value ? this.value.concat([date]) : [date]);\n        }\n        else if (this.isRangeSelection()) {\n            if (this.value && this.value.length) {\n                var startDate = this.value[0];\n                var endDate = this.value[1];\n                if (!endDate && date.getTime() >= startDate.getTime()) {\n                    endDate = date;\n                }\n                else {\n                    startDate = date;\n                    endDate = null;\n                }\n                this.updateModel([startDate, endDate]);\n            }\n            else {\n                this.updateModel([date, null]);\n            }\n        }\n        this.onSelect.emit(date);\n    };\n    Calendar.prototype.updateModel = function (value) {\n        var _this = this;\n        this.value = value;\n        if (this.dataType == 'date') {\n            this.onModelChange(this.value);\n        }\n        else if (this.dataType == 'string') {\n            if (this.isSingleSelection()) {\n                this.onModelChange(this.formatDateTime(this.value));\n            }\n            else {\n                var stringArrValue = null;\n                if (this.value) {\n                    stringArrValue = this.value.map(function (date) { return _this.formatDateTime(date); });\n                }\n                this.onModelChange(stringArrValue);\n            }\n        }\n    };\n    Calendar.prototype.getFirstDayOfMonthIndex = function (month, year) {\n        var day = new Date();\n        day.setDate(1);\n        day.setMonth(month);\n        day.setFullYear(year);\n        var dayIndex = day.getDay() + this.getSundayIndex();\n        return dayIndex >= 7 ? dayIndex - 7 : dayIndex;\n    };\n    Calendar.prototype.getDaysCountInMonth = function (month, year) {\n        return 32 - this.daylightSavingAdjust(new Date(year, month, 32)).getDate();\n    };\n    Calendar.prototype.getDaysCountInPrevMonth = function (month, year) {\n        var prev = this.getPreviousMonthAndYear(month, year);\n        return this.getDaysCountInMonth(prev.month, prev.year);\n    };\n    Calendar.prototype.getPreviousMonthAndYear = function (month, year) {\n        var m, y;\n        if (month === 0) {\n            m = 11;\n            y = year - 1;\n        }\n        else {\n            m = month - 1;\n            y = year;\n        }\n        return { 'month': m, 'year': y };\n    };\n    Calendar.prototype.getNextMonthAndYear = function (month, year) {\n        var m, y;\n        if (month === 11) {\n            m = 0;\n            y = year + 1;\n        }\n        else {\n            m = month + 1;\n            y = year;\n        }\n        return { 'month': m, 'year': y };\n    };\n    Calendar.prototype.getSundayIndex = function () {\n        return this.locale.firstDayOfWeek > 0 ? 7 - this.locale.firstDayOfWeek : 0;\n    };\n    Calendar.prototype.isSelected = function (dateMeta) {\n        if (this.value) {\n            if (this.isSingleSelection()) {\n                return this.isDateEquals(this.value, dateMeta);\n            }\n            else if (this.isMultipleSelection()) {\n                var selected = false;\n                for (var _i = 0, _a = this.value; _i < _a.length; _i++) {\n                    var date = _a[_i];\n                    selected = this.isDateEquals(date, dateMeta);\n                    if (selected) {\n                        break;\n                    }\n                }\n                return selected;\n            }\n            else if (this.isRangeSelection()) {\n                if (this.value[1])\n                    return this.isDateEquals(this.value[0], dateMeta) || this.isDateEquals(this.value[1], dateMeta) || this.isDateBetween(this.value[0], this.value[1], dateMeta);\n                else\n                    return this.isDateEquals(this.value[0], dateMeta);\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    Calendar.prototype.isMonthSelected = function (month) {\n        if (this.value) {\n            return this.value.getDate() === 1 && this.value.getMonth() === month && this.value.getFullYear() === this.currentYear;\n        }\n        else {\n            return false;\n        }\n    };\n    Calendar.prototype.isDateEquals = function (value, dateMeta) {\n        if (value)\n            return value.getDate() === dateMeta.day && value.getMonth() === dateMeta.month && value.getFullYear() === dateMeta.year;\n        else\n            return false;\n    };\n    Calendar.prototype.isDateBetween = function (start, end, dateMeta) {\n        var between = false;\n        if (start && end) {\n            var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);\n            return start.getTime() <= date.getTime() && end.getTime() >= date.getTime();\n        }\n        return between;\n    };\n    Calendar.prototype.isSingleSelection = function () {\n        return this.selectionMode === 'single';\n    };\n    Calendar.prototype.isRangeSelection = function () {\n        return this.selectionMode === 'range';\n    };\n    Calendar.prototype.isMultipleSelection = function () {\n        return this.selectionMode === 'multiple';\n    };\n    Calendar.prototype.isToday = function (today, day, month, year) {\n        return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;\n    };\n    Calendar.prototype.isSelectable = function (day, month, year) {\n        var validMin = true;\n        var validMax = true;\n        var validDate = true;\n        var validDay = true;\n        if (this.minDate) {\n            if (this.minDate.getFullYear() > year) {\n                validMin = false;\n            }\n            else if (this.minDate.getFullYear() === year) {\n                if (this.minDate.getMonth() > month) {\n                    validMin = false;\n                }\n                else if (this.minDate.getMonth() === month) {\n                    if (this.minDate.getDate() > day) {\n                        validMin = false;\n                    }\n                }\n            }\n        }\n        if (this.maxDate) {\n            if (this.maxDate.getFullYear() < year) {\n                validMax = false;\n            }\n            else if (this.maxDate.getFullYear() === year) {\n                if (this.maxDate.getMonth() < month) {\n                    validMax = false;\n                }\n                else if (this.maxDate.getMonth() === month) {\n                    if (this.maxDate.getDate() < day) {\n                        validMax = false;\n                    }\n                }\n            }\n        }\n        if (this.disabledDates) {\n            validDate = !this.isDateDisabled(day, month, year);\n        }\n        if (this.disabledDays) {\n            validDay = !this.isDayDisabled(day, month, year);\n        }\n        return validMin && validMax && validDate && validDay;\n    };\n    Calendar.prototype.isDateDisabled = function (day, month, year) {\n        if (this.disabledDates) {\n            for (var _i = 0, _a = this.disabledDates; _i < _a.length; _i++) {\n                var disabledDate = _a[_i];\n                if (disabledDate.getFullYear() === year && disabledDate.getMonth() === month && disabledDate.getDate() === day) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Calendar.prototype.isDayDisabled = function (day, month, year) {\n        if (this.disabledDays) {\n            var weekday = new Date(year, month, day);\n            var weekdayNumber = weekday.getDay();\n            return this.disabledDays.indexOf(weekdayNumber) !== -1;\n        }\n        return false;\n    };\n    Calendar.prototype.onInputFocus = function (event) {\n        this.focus = true;\n        if (this.showOnFocus) {\n            this.showOverlay();\n        }\n        this.onFocus.emit(event);\n    };\n    Calendar.prototype.onInputClick = function (event) {\n        this.datepickerClick = true;\n        if (this.autoZIndex) {\n            this.overlayViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++domhandler_1.DomHandler.zindex));\n        }\n    };\n    Calendar.prototype.onInputBlur = function (event) {\n        this.focus = false;\n        this.onBlur.emit(event);\n        if (!this.keepInvalid) {\n            this.updateInputfield();\n        }\n        this.onModelTouched();\n    };\n    Calendar.prototype.onButtonClick = function (event, inputfield) {\n        var _this = this;\n        if (!this.overlayViewChild.nativeElement.offsetParent || this.overlayViewChild.nativeElement.style.display === 'none') {\n            inputfield.focus();\n            this.showOverlay();\n            if (this.overlayViewChild != undefined) {\n                setTimeout(function () {\n                    _this.overlay = _this.overlayViewChild.nativeElement;\n                    _this.selectElement = _this.domHandler.findSingle(_this.overlay, 'a.ui-state-active');\n                    _this.todayElement = _this.domHandler.findSingle(_this.overlay, 'a.ui-state-highlight');\n                    _this.focusElement = _this.selectElement ? _this.selectElement : _this.todayElement;\n                    _this.focusElement.focus();\n                }, 200);\n            }\n        }\n        else\n            this.overlayVisible = false;\n        this.datepickerClick = true;\n    };\n    Calendar.prototype.onInputKeydown = function (event) {\n        this.isKeydown = true;\n        if (event.keyCode === 9) {\n            this.overlayVisible = false;\n        }\n    };\n    Calendar.prototype.onMonthDropdownChange = function (m) {\n        this.currentMonth = parseInt(m);\n        this.onMonthChange.emit({ month: this.currentMonth + 1, year: this.currentYear });\n        this.createMonths(this.currentMonth, this.currentYear);\n    };\n    Calendar.prototype.onYearDropdownChange = function (y) {\n        this.currentYear = parseInt(y);\n        this.onYearChange.emit({ month: this.currentMonth + 1, year: this.currentYear });\n        this.createMonths(this.currentMonth, this.currentYear);\n    };\n    Calendar.prototype.incrementHour = function (event) {\n        var prevHour = this.currentHour;\n        var newHour = this.currentHour + this.stepHour;\n        if (this.validateHour(newHour)) {\n            if (this.hourFormat == '24')\n                this.currentHour = (newHour >= 24) ? (newHour - 24) : newHour;\n            else if (this.hourFormat == '12') {\n                // Before the AM/PM break, now after\n                if (prevHour < 12 && newHour > 11) {\n                    this.pm = !this.pm;\n                }\n                this.currentHour = (newHour >= 13) ? (newHour - 12) : newHour;\n            }\n            this.updateTime();\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.decrementHour = function (event) {\n        var newHour = this.currentHour - this.stepHour;\n        if (this.validateHour(newHour)) {\n            if (this.hourFormat == '24')\n                this.currentHour = (newHour < 0) ? (24 + newHour) : newHour;\n            else if (this.hourFormat == '12') {\n                // If we were at noon/midnight, then switch\n                if (this.currentHour === 12) {\n                    this.pm = !this.pm;\n                }\n                this.currentHour = (newHour <= 0) ? (12 + newHour) : newHour;\n            }\n            this.updateTime();\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.validateHour = function (hour) {\n        var valid = true;\n        var value = this.value;\n        if (this.isRangeSelection()) {\n            value = this.value[1] || this.value[0];\n        }\n        if (this.isMultipleSelection()) {\n            value = this.value[this.value.length - 1];\n        }\n        var valueDateString = value ? value.toDateString() : null;\n        if (this.minDate && valueDateString && this.minDate.toDateString() === valueDateString) {\n            if (this.minDate.getHours() > hour) {\n                valid = false;\n            }\n        }\n        if (this.maxDate && valueDateString && this.maxDate.toDateString() === valueDateString) {\n            if (this.maxDate.getHours() < hour) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n    Calendar.prototype.incrementMinute = function (event) {\n        var newMinute = this.currentMinute + this.stepMinute;\n        if (this.validateMinute(newMinute)) {\n            this.currentMinute = (newMinute > 59) ? newMinute - 60 : newMinute;\n            this.updateTime();\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.decrementMinute = function (event) {\n        var newMinute = this.currentMinute - this.stepMinute;\n        if (this.validateMinute(newMinute)) {\n            this.currentMinute = (newMinute < 0) ? 60 + newMinute : newMinute;\n            this.updateTime();\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.validateMinute = function (minute) {\n        var valid = true;\n        var value = this.value;\n        if (this.isRangeSelection()) {\n            value = this.value[1] || this.value[0];\n        }\n        if (this.isMultipleSelection()) {\n            value = this.value[this.value.length - 1];\n        }\n        var valueDateString = value ? value.toDateString() : null;\n        if (this.minDate && valueDateString && this.minDate.toDateString() === valueDateString) {\n            if (value.getHours() == this.minDate.getHours()) {\n                if (this.minDate.getMinutes() > minute) {\n                    valid = false;\n                }\n            }\n        }\n        if (this.maxDate && valueDateString && this.maxDate.toDateString() === valueDateString) {\n            if (value.getHours() == this.maxDate.getHours()) {\n                if (this.maxDate.getMinutes() < minute) {\n                    valid = false;\n                }\n            }\n        }\n        return valid;\n    };\n    Calendar.prototype.incrementSecond = function (event) {\n        var newSecond = this.currentSecond + this.stepSecond;\n        if (this.validateSecond(newSecond)) {\n            this.currentSecond = (newSecond > 59) ? newSecond - 60 : newSecond;\n            this.updateTime();\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.decrementSecond = function (event) {\n        var newSecond = this.currentSecond - this.stepSecond;\n        if (this.validateSecond(newSecond)) {\n            this.currentSecond = (newSecond < 0) ? 60 + newSecond : newSecond;\n            this.updateTime();\n        }\n        event.preventDefault();\n    };\n    Calendar.prototype.validateSecond = function (second) {\n        var valid = true;\n        var value = this.value;\n        if (this.isRangeSelection()) {\n            value = this.value[1] || this.value[0];\n        }\n        if (this.isMultipleSelection()) {\n            value = this.value[this.value.length - 1];\n        }\n        var valueDateString = value ? value.toDateString() : null;\n        if (this.minDate && valueDateString && this.minDate.toDateString() === valueDateString) {\n            if (this.minDate.getSeconds() > second) {\n                valid = false;\n            }\n        }\n        if (this.maxDate && valueDateString && this.maxDate.toDateString() === valueDateString) {\n            if (this.maxDate.getSeconds() < second) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n    Calendar.prototype.updateTime = function () {\n        var value = this.value;\n        if (this.isRangeSelection()) {\n            value = this.value[1] || this.value[0];\n        }\n        if (this.isMultipleSelection()) {\n            value = this.value[this.value.length - 1];\n        }\n        value = value ? new Date(value.getTime()) : new Date();\n        if (this.hourFormat == '12') {\n            if (this.currentHour === 12)\n                value.setHours(this.pm ? 12 : 0);\n            else\n                value.setHours(this.pm ? this.currentHour + 12 : this.currentHour);\n        }\n        else {\n            value.setHours(this.currentHour);\n        }\n        value.setMinutes(this.currentMinute);\n        value.setSeconds(this.currentSecond);\n        if (this.isRangeSelection()) {\n            if (this.value[1])\n                value = [this.value[0], value];\n            else\n                value = [value, null];\n        }\n        if (this.isMultipleSelection()) {\n            value = this.value.slice(0, -1).concat([value]);\n        }\n        this.updateModel(value);\n        this.onSelect.emit(value);\n        this.updateInputfield();\n    };\n    Calendar.prototype.toggleAMPM = function (event) {\n        this.pm = !this.pm;\n        this.updateTime();\n        event.preventDefault();\n    };\n    Calendar.prototype.onUserInput = function (event) {\n        // IE 11 Workaround for input placeholder : https://github.com/primefaces/primeng/issues/2026\n        if (!this.isKeydown) {\n            return;\n        }\n        this.isKeydown = false;\n        var val = event.target.value;\n        try {\n            var value = this.parseValueFromString(val);\n            this.updateModel(value);\n            this.updateUI();\n        }\n        catch (err) {\n            //invalid date\n            this.updateModel(null);\n        }\n        this.filled = val != null && val.length;\n        this.onInput.emit(event);\n    };\n    Calendar.prototype.parseValueFromString = function (text) {\n        if (!text || text.trim().length === 0) {\n            return null;\n        }\n        var value;\n        if (this.isSingleSelection()) {\n            value = this.parseDateTime(text);\n        }\n        else if (this.isMultipleSelection()) {\n            var tokens = text.split(',');\n            value = [];\n            for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n                var token = tokens_1[_i];\n                value.push(this.parseDateTime(token.trim()));\n            }\n        }\n        else if (this.isRangeSelection()) {\n            var tokens = text.split(' - ');\n            value = [];\n            for (var i = 0; i < tokens.length; i++) {\n                value[i] = this.parseDateTime(tokens[i].trim());\n            }\n        }\n        return value;\n    };\n    Calendar.prototype.parseDateTime = function (text) {\n        var date;\n        var parts = text.split(' ');\n        if (this.timeOnly) {\n            date = new Date();\n            this.populateTime(date, parts[0], parts[1]);\n        }\n        else {\n            if (this.showTime) {\n                date = this.parseDate(parts[0], this.dateFormat);\n                this.populateTime(date, parts[1], parts[2]);\n            }\n            else {\n                date = this.parseDate(text, this.dateFormat);\n            }\n        }\n        return date;\n    };\n    Calendar.prototype.populateTime = function (value, timeString, ampm) {\n        if (this.hourFormat == '12' && !ampm) {\n            throw 'Invalid Time';\n        }\n        this.pm = (ampm === 'PM' || ampm === 'pm');\n        var time = this.parseTime(timeString);\n        value.setHours(time.hour);\n        value.setMinutes(time.minute);\n        value.setSeconds(time.second);\n    };\n    Calendar.prototype.updateUI = function () {\n        var val = this.value || this.defaultDate || new Date();\n        if (Array.isArray(val)) {\n            val = val[0];\n        }\n        this.createMonths(val.getMonth(), val.getFullYear());\n        if (this.showTime || this.timeOnly) {\n            var hours = val.getHours();\n            if (this.hourFormat == '12') {\n                this.pm = hours > 11;\n                if (hours >= 12) {\n                    this.currentHour = (hours == 12) ? 12 : hours - 12;\n                }\n                else {\n                    this.currentHour = (hours == 0) ? 12 : hours;\n                }\n            }\n            else {\n                this.currentHour = val.getHours();\n            }\n            this.currentMinute = val.getMinutes();\n            this.currentSecond = val.getSeconds();\n        }\n    };\n    Calendar.prototype.onDatePickerClick = function (event) {\n        this.datepickerClick = true;\n    };\n    Calendar.prototype.showOverlay = function () {\n        this.overlayVisible = true;\n        this.overlayShown = true;\n        if (this.autoZIndex) {\n            this.overlayViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++domhandler_1.DomHandler.zindex));\n        }\n        this.bindDocumentClickListener();\n    };\n    Calendar.prototype.alignOverlay = function () {\n        if (this.touchUI) {\n            this.enableModality();\n        }\n        else {\n            if (this.appendTo)\n                this.domHandler.absolutePosition(this.overlayViewChild.nativeElement, this.inputfieldViewChild.nativeElement);\n            else\n                this.domHandler.relativePosition(this.overlayViewChild.nativeElement, this.inputfieldViewChild.nativeElement);\n        }\n    };\n    Calendar.prototype.enableModality = function () {\n        var _this = this;\n        if (!this.mask) {\n            this.mask = document.createElement('div');\n            this.mask.style.zIndex = String(parseInt(this.overlayViewChild.nativeElement.style.zIndex) - 1);\n            var maskStyleClass = 'ui-widget-overlay ui-datepicker-mask ui-datepicker-mask-scrollblocker';\n            this.domHandler.addMultipleClasses(this.mask, maskStyleClass);\n            this.maskClickListener = this.renderer.listen(this.mask, 'click', function (event) {\n                _this.disableModality();\n            });\n            document.body.appendChild(this.mask);\n            this.domHandler.addClass(document.body, 'ui-overflow-hidden');\n        }\n    };\n    Calendar.prototype.disableModality = function () {\n        if (this.mask) {\n            document.body.removeChild(this.mask);\n            var bodyChildren = document.body.children;\n            var hasBlockerMasks = void 0;\n            for (var i = 0; i < bodyChildren.length; i++) {\n                var bodyChild = bodyChildren[i];\n                if (this.domHandler.hasClass(bodyChild, 'ui-datepicker-mask-scrollblocker')) {\n                    hasBlockerMasks = true;\n                    break;\n                }\n            }\n            if (!hasBlockerMasks) {\n                this.domHandler.removeClass(document.body, 'ui-overflow-hidden');\n            }\n            this.overlayVisible = false;\n            this.unbindMaskClickListener();\n            this.mask = null;\n        }\n    };\n    Calendar.prototype.unbindMaskClickListener = function () {\n        if (this.maskClickListener) {\n            this.maskClickListener();\n            this.maskClickListener = null;\n        }\n    };\n    Calendar.prototype.writeValue = function (value) {\n        this.value = value;\n        if (this.value && typeof this.value === 'string') {\n            this.value = this.parseValueFromString(this.value);\n        }\n        this.updateInputfield();\n        this.updateUI();\n    };\n    Calendar.prototype.registerOnChange = function (fn) {\n        this.onModelChange = fn;\n    };\n    Calendar.prototype.registerOnTouched = function (fn) {\n        this.onModelTouched = fn;\n    };\n    Calendar.prototype.setDisabledState = function (val) {\n        this.disabled = val;\n    };\n    // Ported from jquery-ui datepicker formatDate\n    Calendar.prototype.formatDate = function (date, format) {\n        if (!date) {\n            return '';\n        }\n        var iFormat;\n        var lookAhead = function (match) {\n            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);\n            if (matches) {\n                iFormat++;\n            }\n            return matches;\n        }, formatNumber = function (match, value, len) {\n            var num = '' + value;\n            if (lookAhead(match)) {\n                while (num.length < len) {\n                    num = '0' + num;\n                }\n            }\n            return num;\n        }, formatName = function (match, value, shortNames, longNames) {\n            return (lookAhead(match) ? longNames[value] : shortNames[value]);\n        };\n        var output = '';\n        var literal = false;\n        if (date) {\n            for (iFormat = 0; iFormat < format.length; iFormat++) {\n                if (literal) {\n                    if (format.charAt(iFormat) === '\\'' && !lookAhead('\\'')) {\n                        literal = false;\n                    }\n                    else {\n                        output += format.charAt(iFormat);\n                    }\n                }\n                else {\n                    switch (format.charAt(iFormat)) {\n                        case 'd':\n                            output += formatNumber('d', date.getDate(), 2);\n                            break;\n                        case 'D':\n                            output += formatName('D', date.getDay(), this.locale.dayNamesShort, this.locale.dayNames);\n                            break;\n                        case 'o':\n                            output += formatNumber('o', Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() -\n                                new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n                            break;\n                        case 'm':\n                            output += formatNumber('m', date.getMonth() + 1, 2);\n                            break;\n                        case 'M':\n                            output += formatName('M', date.getMonth(), this.locale.monthNamesShort, this.locale.monthNames);\n                            break;\n                        case 'y':\n                            output += lookAhead('y') ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? '0' : '') + (date.getFullYear() % 100);\n                            break;\n                        case '@':\n                            output += date.getTime();\n                            break;\n                        case '!':\n                            output += date.getTime() * 10000 + this.ticksTo1970;\n                            break;\n                        case '\\'':\n                            if (lookAhead('\\'')) {\n                                output += '\\'';\n                            }\n                            else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            output += format.charAt(iFormat);\n                    }\n                }\n            }\n        }\n        return output;\n    };\n    Calendar.prototype.formatTime = function (date) {\n        if (!date) {\n            return '';\n        }\n        var output = '';\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var seconds = date.getSeconds();\n        if (this.hourFormat == '12' && hours > 11 && hours != 12) {\n            hours -= 12;\n        }\n        if (this.hourFormat == '12') {\n            output += hours === 0 ? 12 : (hours < 10) ? '0' + hours : hours;\n        }\n        else {\n            output += (hours < 10) ? '0' + hours : hours;\n        }\n        output += ':';\n        output += (minutes < 10) ? '0' + minutes : minutes;\n        if (this.showSeconds) {\n            output += ':';\n            output += (seconds < 10) ? '0' + seconds : seconds;\n        }\n        if (this.hourFormat == '12') {\n            output += date.getHours() > 11 ? ' PM' : ' AM';\n        }\n        return output;\n    };\n    Calendar.prototype.parseTime = function (value) {\n        var tokens = value.split(':');\n        var validTokenLength = this.showSeconds ? 3 : 2;\n        if (tokens.length !== validTokenLength) {\n            throw \"Invalid time\";\n        }\n        var h = parseInt(tokens[0]);\n        var m = parseInt(tokens[1]);\n        var s = this.showSeconds ? parseInt(tokens[2]) : null;\n        if (isNaN(h) || isNaN(m) || h > 23 || m > 59 || (this.hourFormat == '12' && h > 12) || (this.showSeconds && (isNaN(s) || s > 59))) {\n            throw \"Invalid time\";\n        }\n        else {\n            if (this.hourFormat == '12' && h !== 12 && this.pm) {\n                h += 12;\n            }\n            return { hour: h, minute: m, second: s };\n        }\n    };\n    // Ported from jquery-ui datepicker parseDate\n    Calendar.prototype.parseDate = function (value, format) {\n        if (format == null || value == null) {\n            throw \"Invalid arguments\";\n        }\n        value = (typeof value === \"object\" ? value.toString() : value + \"\");\n        if (value === \"\") {\n            return null;\n        }\n        var iFormat, dim, extra, iValue = 0, shortYearCutoff = (typeof this.shortYearCutoff !== \"string\" ? this.shortYearCutoff : new Date().getFullYear() % 100 + parseInt(this.shortYearCutoff, 10)), year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function (match) {\n            var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);\n            if (matches) {\n                iFormat++;\n            }\n            return matches;\n        }, getNumber = function (match) {\n            var isDoubled = lookAhead(match), size = (match === \"@\" ? 14 : (match === \"!\" ? 20 :\n                (match === \"y\" && isDoubled ? 4 : (match === \"o\" ? 3 : 2)))), minSize = (match === \"y\" ? size : 1), digits = new RegExp(\"^\\\\d{\" + minSize + \",\" + size + \"}\"), num = value.substring(iValue).match(digits);\n            if (!num) {\n                throw \"Missing number at position \" + iValue;\n            }\n            iValue += num[0].length;\n            return parseInt(num[0], 10);\n        }, getName = function (match, shortNames, longNames) {\n            var index = -1;\n            var arr = lookAhead(match) ? longNames : shortNames;\n            var names = [];\n            for (var i = 0; i < arr.length; i++) {\n                names.push([i, arr[i]]);\n            }\n            names.sort(function (a, b) {\n                return -(a[1].length - b[1].length);\n            });\n            for (var i = 0; i < names.length; i++) {\n                var name_1 = names[i][1];\n                if (value.substr(iValue, name_1.length).toLowerCase() === name_1.toLowerCase()) {\n                    index = names[i][0];\n                    iValue += name_1.length;\n                    break;\n                }\n            }\n            if (index !== -1) {\n                return index + 1;\n            }\n            else {\n                throw \"Unknown name at position \" + iValue;\n            }\n        }, checkLiteral = function () {\n            if (value.charAt(iValue) !== format.charAt(iFormat)) {\n                throw \"Unexpected literal at position \" + iValue;\n            }\n            iValue++;\n        };\n        for (iFormat = 0; iFormat < format.length; iFormat++) {\n            if (literal) {\n                if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n                    literal = false;\n                }\n                else {\n                    checkLiteral();\n                }\n            }\n            else {\n                switch (format.charAt(iFormat)) {\n                    case \"d\":\n                        day = getNumber(\"d\");\n                        break;\n                    case \"D\":\n                        getName(\"D\", this.locale.dayNamesShort, this.locale.dayNames);\n                        break;\n                    case \"o\":\n                        doy = getNumber(\"o\");\n                        break;\n                    case \"m\":\n                        month = getNumber(\"m\");\n                        break;\n                    case \"M\":\n                        month = getName(\"M\", this.locale.monthNamesShort, this.locale.monthNames);\n                        break;\n                    case \"y\":\n                        year = getNumber(\"y\");\n                        break;\n                    case \"@\":\n                        date = new Date(getNumber(\"@\"));\n                        year = date.getFullYear();\n                        month = date.getMonth() + 1;\n                        day = date.getDate();\n                        break;\n                    case \"!\":\n                        date = new Date((getNumber(\"!\") - this.ticksTo1970) / 10000);\n                        year = date.getFullYear();\n                        month = date.getMonth() + 1;\n                        day = date.getDate();\n                        break;\n                    case \"'\":\n                        if (lookAhead(\"'\")) {\n                            checkLiteral();\n                        }\n                        else {\n                            literal = true;\n                        }\n                        break;\n                    default:\n                        checkLiteral();\n                }\n            }\n        }\n        if (iValue < value.length) {\n            extra = value.substr(iValue);\n            if (!/^\\s+/.test(extra)) {\n                throw \"Extra/unparsed characters found in date: \" + extra;\n            }\n        }\n        if (year === -1) {\n            year = new Date().getFullYear();\n        }\n        else if (year < 100) {\n            year += new Date().getFullYear() - new Date().getFullYear() % 100 +\n                (year <= shortYearCutoff ? 0 : -100);\n        }\n        if (doy > -1) {\n            month = 1;\n            day = doy;\n            do {\n                dim = this.getDaysCountInMonth(year, month - 1);\n                if (day <= dim) {\n                    break;\n                }\n                month++;\n                day -= dim;\n            } while (true);\n        }\n        date = this.daylightSavingAdjust(new Date(year, month - 1, day));\n        if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n            throw \"Invalid date\"; // E.g. 31/02/00\n        }\n        return date;\n    };\n    Calendar.prototype.daylightSavingAdjust = function (date) {\n        if (!date) {\n            return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n    };\n    Calendar.prototype.updateFilledState = function () {\n        this.filled = this.inputFieldValue && this.inputFieldValue != '';\n    };\n    Calendar.prototype.onTodayButtonClick = function (event) {\n        var date = new Date();\n        var dateMeta = { day: date.getDate(), month: date.getMonth(), year: date.getFullYear(), today: true, selectable: true };\n        this.createMonths(dateMeta.month, dateMeta.year);\n        this.onDateSelect(event, dateMeta);\n        this.onTodayClick.emit(event);\n    };\n    Calendar.prototype.onClearButtonClick = function (event) {\n        this.updateModel(null);\n        this.updateInputfield();\n        this.overlayVisible = false;\n        this.onClearClick.emit(event);\n    };\n    Calendar.prototype.bindDocumentClickListener = function () {\n        var _this = this;\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', function (event) {\n                if (!_this.datepickerClick && _this.overlayVisible) {\n                    _this.overlayVisible = false;\n                    _this.onClose.emit(event);\n                }\n                _this.datepickerClick = false;\n                _this.cd.detectChanges();\n            });\n        }\n    };\n    Calendar.prototype.unbindDocumentClickListener = function () {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    };\n    Calendar.prototype.ngOnDestroy = function () {\n        this.unbindDocumentClickListener();\n        this.unbindMaskClickListener();\n        if (!this.inline && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlayViewChild.nativeElement);\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Date)\n    ], Calendar.prototype, \"defaultDate\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"style\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"styleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"inputStyle\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"inputId\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"name\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"inputStyleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"placeholder\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Calendar.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"dateFormat\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"inline\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"showOtherMonths\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"selectOtherMonths\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"showIcon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"icon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Calendar.prototype, \"appendTo\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"readonlyInput\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Calendar.prototype, \"shortYearCutoff\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"monthNavigator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"yearNavigator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"yearRange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"hourFormat\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"timeOnly\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"stepHour\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"stepMinute\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"stepSecond\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"showSeconds\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"required\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"showOnFocus\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"dataType\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"selectionMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"maxDateCount\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"showButtonBar\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"todayButtonStyleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"clearButtonStyleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"autoZIndex\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"baseZIndex\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"panelStyleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"keepInvalid\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"hideOnDateTimeSelect\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"numberOfMonths\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Calendar.prototype, \"view\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Calendar.prototype, \"touchUI\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onFocus\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onBlur\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onClose\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onInput\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onTodayClick\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onClearClick\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onMonthChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Calendar.prototype, \"onYearChange\", void 0);\n    __decorate([\n        core_1.ContentChildren(shared_1.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], Calendar.prototype, \"templates\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Calendar.prototype, \"tabindex\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], Calendar.prototype, \"utc\", null);\n    __decorate([\n        core_1.ViewChild('datepicker'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Calendar.prototype, \"overlayViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('inputfield'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Calendar.prototype, \"inputfieldViewChild\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Date),\n        __metadata(\"design:paramtypes\", [Date])\n    ], Calendar.prototype, \"minDate\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Date),\n        __metadata(\"design:paramtypes\", [Date])\n    ], Calendar.prototype, \"maxDate\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], Calendar.prototype, \"disabledDates\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], Calendar.prototype, \"disabledDays\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], Calendar.prototype, \"showTime\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], Calendar.prototype, \"locale\", null);\n    Calendar = __decorate([\n        core_1.Component({\n            selector: 'p-calendar',\n            template: \"\\n        <span [ngClass]=\\\"{'ui-calendar':true, 'ui-calendar-w-btn': showIcon, 'ui-calendar-timeonly': timeOnly}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <ng-template [ngIf]=\\\"!inline\\\">\\n                <input #inputfield type=\\\"text\\\" [attr.id]=\\\"inputId\\\" [attr.name]=\\\"name\\\" [attr.required]=\\\"required\\\" [value]=\\\"inputFieldValue\\\" (focus)=\\\"onInputFocus($event)\\\" (keydown)=\\\"onInputKeydown($event)\\\" (click)=\\\"onInputClick($event)\\\" (blur)=\\\"onInputBlur($event)\\\"\\n                    [readonly]=\\\"readonlyInput\\\" (input)=\\\"onUserInput($event)\\\" [ngStyle]=\\\"inputStyle\\\" [class]=\\\"inputStyleClass\\\" [placeholder]=\\\"placeholder||''\\\" [disabled]=\\\"disabled\\\" [attr.tabindex]=\\\"tabindex\\\"\\n                    [ngClass]=\\\"'ui-inputtext ui-widget ui-state-default ui-corner-all'\\\" autocomplete=\\\"off\\\"\\n                    ><button type=\\\"button\\\" [icon]=\\\"icon\\\" pButton *ngIf=\\\"showIcon\\\" (click)=\\\"onButtonClick($event,inputfield)\\\" class=\\\"ui-datepicker-trigger ui-calendar-button\\\"\\n                    [ngClass]=\\\"{'ui-state-disabled':disabled}\\\" [disabled]=\\\"disabled\\\" tabindex=\\\"-1\\\"></button>\\n            </ng-template>\\n            <div #datepicker [class]=\\\"panelStyleClass\\\" [ngClass]=\\\"{'ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all': true, 'ui-datepicker-inline':inline,'ui-shadow':!inline,\\n                'ui-state-disabled':disabled,'ui-datepicker-timeonly':timeOnly,'ui-datepicker-multiple-month': this.numberOfMonths > 1, 'ui-datepicker-monthpicker': (view === 'month'), 'ui-datepicker-touch-ui': touchUI}\\\"\\n                [ngStyle]=\\\"{'display': inline ? 'inline-block' : (overlayVisible ? 'block' : 'none')}\\\" (click)=\\\"onDatePickerClick($event)\\\" [@overlayState]=\\\"inline ? 'visible' : (overlayVisible ? 'visible' : 'hidden')\\\">\\n                \\n                <ng-container *ngIf=\\\"!timeOnly && (overlayVisible || inline)\\\">\\n                    <div class=\\\"ui-datepicker-group ui-widget-content\\\" *ngFor=\\\"let month of months; let i = index;\\\">\\n                        <div class=\\\"ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all\\\">\\n                            <ng-content select=\\\"p-header\\\"></ng-content>\\n                            <a class=\\\"ui-datepicker-prev ui-corner-all\\\" href=\\\"#\\\" (click)=\\\"navBackward($event)\\\" *ngIf=\\\"i === 0\\\">\\n                                <span class=\\\"pi pi-chevron-left\\\"></span>\\n                            </a>\\n                            <a class=\\\"ui-datepicker-next ui-corner-all\\\" href=\\\"#\\\" (click)=\\\"navForward($event)\\\" *ngIf=\\\"this.numberOfMonths === 1 ? true : (i === this.numberOfMonths -1)\\\">\\n                                <span class=\\\"pi pi-chevron-right\\\"></span>\\n                            </a>\\n                            <div class=\\\"ui-datepicker-title\\\">\\n                                <span class=\\\"ui-datepicker-month\\\" *ngIf=\\\"!monthNavigator && (view !== 'month')\\\">{{locale.monthNames[month.month]}}</span>\\n                                <select class=\\\"ui-datepicker-month\\\" *ngIf=\\\"monthNavigator && (view !== 'month')\\\" (change)=\\\"onMonthDropdownChange($event.target.value)\\\">\\n                                    <option [value]=\\\"i\\\" *ngFor=\\\"let month of locale.monthNames;let i = index\\\" [selected]=\\\"i == currentMonth + i\\\">{{month}}</option>\\n                                </select>\\n                                <select class=\\\"ui-datepicker-year\\\" *ngIf=\\\"yearNavigator\\\" (change)=\\\"onYearDropdownChange($event.target.value)\\\">\\n                                    <option [value]=\\\"year\\\" *ngFor=\\\"let year of yearOptions\\\" [selected]=\\\"year == currentYear\\\">{{year}}</option>\\n                                </select>\\n                                <span class=\\\"ui-datepicker-year\\\" *ngIf=\\\"!yearNavigator\\\">{{month.year}}</span>\\n                            </div>\\n                        </div>\\n                        <div class=\\\"ui-datepicker-calendar-container\\\" *ngIf=\\\"view ==='date'\\\">\\n                            <table class=\\\"ui-datepicker-calendar\\\">\\n                                <thead>\\n                                    <tr>\\n                                        <th scope=\\\"col\\\" *ngFor=\\\"let weekDay of weekDays;let begin = first; let end = last\\\">\\n                                            <span>{{weekDay}}</span>\\n                                        </th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngFor=\\\"let week of month.dates\\\">\\n                                        <td *ngFor=\\\"let date of week\\\" [ngClass]=\\\"{'ui-datepicker-other-month ui-state-disabled':date.otherMonth,\\n                                            'ui-datepicker-current-day':isSelected(date),'ui-datepicker-today':date.today}\\\">\\n                                            <a class=\\\"ui-state-default\\\" href=\\\"#\\\" *ngIf=\\\"date.otherMonth ? showOtherMonths : true\\\"\\n                                                [ngClass]=\\\"{'ui-state-active':isSelected(date), 'ui-state-highlight':date.today, 'ui-state-disabled':!date.selectable}\\\"\\n                                                (click)=\\\"onDateSelect($event,date)\\\" draggable=\\\"false\\\">\\n                                                <ng-container *ngIf=\\\"!dateTemplate\\\">{{date.day}}</ng-container>\\n                                                <ng-container *ngTemplateOutlet=\\\"dateTemplate; context: {$implicit: date}\\\"></ng-container>\\n                                            </a>\\n                                        </td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                        <div class=\\\"ui-datepicker-monthpicker-container\\\" *ngIf=\\\"view === 'month'\\\">\\n                            <a href=\\\"#\\\" *ngFor=\\\"let m of monthPickerValues; let i = index\\\" (click)=\\\"onMonthSelect($event, i)\\\" class=\\\"ui-datepicker-month-cell\\\" [ngClass]=\\\"{'ui-state-active': isMonthSelected(i)}\\\">\\n                                {{m}}                                \\n                            </a>\\n                        </div>\\n                    </div>\\n                </ng-container>\\n                <div class=\\\"ui-timepicker ui-widget-header ui-corner-all\\\" *ngIf=\\\"showTime||timeOnly\\\">\\n                    <div class=\\\"ui-hour-picker\\\">\\n                        <a href=\\\"#\\\" (click)=\\\"incrementHour($event)\\\">\\n                            <span class=\\\"pi pi-chevron-up\\\"></span>\\n                        </a>\\n                        <span [ngStyle]=\\\"{'display': currentHour < 10 ? 'inline': 'none'}\\\">0</span><span>{{currentHour}}</span>\\n                        <a href=\\\"#\\\" (click)=\\\"decrementHour($event)\\\">\\n                            <span class=\\\"pi pi-chevron-down\\\"></span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"ui-separator\\\">\\n                        <a href=\\\"#\\\">\\n                            <span class=\\\"pi pi-chevron-up\\\"></span>\\n                        </a>\\n                        <span>:</span>\\n                        <a href=\\\"#\\\">\\n                            <span class=\\\"pi pi-chevron-down\\\"></span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"ui-minute-picker\\\">\\n                        <a href=\\\"#\\\" (click)=\\\"incrementMinute($event)\\\">\\n                            <span class=\\\"pi pi-chevron-up\\\"></span>\\n                        </a>\\n                        <span [ngStyle]=\\\"{'display': currentMinute < 10 ? 'inline': 'none'}\\\">0</span><span>{{currentMinute}}</span>\\n                        <a href=\\\"#\\\" (click)=\\\"decrementMinute($event)\\\">\\n                            <span class=\\\"pi pi-chevron-down\\\"></span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"ui-separator\\\" *ngIf=\\\"showSeconds\\\">\\n                        <a href=\\\"#\\\">\\n                            <span class=\\\"pi pi-chevron-up\\\"></span>\\n                        </a>\\n                        <span>:</span>\\n                        <a href=\\\"#\\\">\\n                            <span class=\\\"pi pi-chevron-down\\\"></span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"ui-second-picker\\\" *ngIf=\\\"showSeconds\\\">\\n                        <a href=\\\"#\\\" (click)=\\\"incrementSecond($event)\\\">\\n                            <span class=\\\"pi pi-chevron-up\\\"></span>\\n                        </a>\\n                        <span [ngStyle]=\\\"{'display': currentSecond < 10 ? 'inline': 'none'}\\\">0</span><span>{{currentSecond}}</span>\\n                        <a href=\\\"#\\\" (click)=\\\"decrementSecond($event)\\\">\\n                            <span class=\\\"pi pi-chevron-down\\\"></span>\\n                        </a>\\n                    </div>\\n                    <div class=\\\"ui-ampm-picker\\\" *ngIf=\\\"hourFormat=='12'\\\">\\n                        <a href=\\\"#\\\" (click)=\\\"toggleAMPM($event)\\\">\\n                            <span class=\\\"pi pi-chevron-up\\\"></span>\\n                        </a>\\n                        <span>{{pm ? 'PM' : 'AM'}}</span>\\n                        <a href=\\\"#\\\" (click)=\\\"toggleAMPM($event)\\\">\\n                            <span class=\\\"pi pi-chevron-down\\\"></span>\\n                        </a>\\n                    </div>\\n                </div>\\n                <div class=\\\"ui-datepicker-buttonbar ui-widget-header\\\" *ngIf=\\\"showButtonBar\\\">\\n                    <div class=\\\"ui-g\\\">\\n                        <div class=\\\"ui-g-6\\\">\\n                            <button type=\\\"button\\\" [label]=\\\"_locale.today\\\" (click)=\\\"onTodayButtonClick($event)\\\" pButton [ngClass]=\\\"[todayButtonStyleClass]\\\"></button>\\n                        </div>\\n                        <div class=\\\"ui-g-6\\\">\\n                            <button type=\\\"button\\\" [label]=\\\"_locale.clear\\\" (click)=\\\"onClearButtonClick($event)\\\" pButton [ngClass]=\\\"[clearButtonStyleClass]\\\"></button>\\n                        </div>\\n                    </div>\\n                </div>\\n                <ng-content select=\\\"p-footer\\\"></ng-content>\\n            </div>\\n        </span>\\n    \",\n            animations: [\n                animations_1.trigger('overlayState', [\n                    animations_1.state('hidden', animations_1.style({\n                        opacity: 0\n                    })),\n                    animations_1.state('visible', animations_1.style({\n                        opacity: 1\n                    })),\n                    animations_1.transition('visible => hidden', animations_1.animate('400ms ease-in')),\n                    animations_1.transition('hidden => visible', animations_1.animate('400ms ease-out'))\n                ])\n            ],\n            host: {\n                '[class.ui-inputwrapper-filled]': 'filled',\n                '[class.ui-inputwrapper-focus]': 'focus'\n            },\n            providers: [domhandler_1.DomHandler, exports.CALENDAR_VALUE_ACCESSOR]\n        })\n    ], Calendar);\n    return Calendar;\n}());\nexports.Calendar = Calendar;\nvar CalendarModule = /** @class */ /*@__PURE__*/ (function () {\n    function CalendarModule() {\n    }\n    CalendarModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, button_1.ButtonModule, shared_1.SharedModule],\n            exports: [Calendar, button_1.ButtonModule, shared_1.SharedModule],\n            declarations: [Calendar]\n        })\n    ], CalendarModule);\n    return CalendarModule;\n}());\nexports.CalendarModule = CalendarModule;\n",null]}
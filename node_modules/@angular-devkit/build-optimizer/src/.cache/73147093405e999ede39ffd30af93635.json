{"remainingRequest":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Development\\AngularProject\\appsecurite6\\node_modules\\primeng\\components\\treetable\\treetable.js","dependencies":[{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\primeng\\components\\treetable\\treetable.js","mtime":1563198752228},{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1563198691178},{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1563198608965}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar rxjs_1 = require(\"rxjs\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar paginator_1 = require(\"../paginator/paginator\");\nvar shared_1 = require(\"../common/shared\");\nvar objectutils_1 = require(\"../utils/objectutils\");\nvar TreeTableService = /** @class */ /*@__PURE__*/ (function () {\n    function TreeTableService() {\n        this.sortSource = new rxjs_1.Subject();\n        this.selectionSource = new rxjs_1.Subject();\n        this.contextMenuSource = new rxjs_1.Subject();\n        this.uiUpdateSource = new rxjs_1.Subject();\n        this.sortSource$ = this.sortSource.asObservable();\n        this.selectionSource$ = this.selectionSource.asObservable();\n        this.contextMenuSource$ = this.contextMenuSource.asObservable();\n        this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    }\n    TreeTableService.prototype.onSort = function (sortMeta) {\n        this.sortSource.next(sortMeta);\n    };\n    TreeTableService.prototype.onSelectionChange = function () {\n        this.selectionSource.next();\n    };\n    TreeTableService.prototype.onContextMenu = function (node) {\n        this.contextMenuSource.next(node);\n    };\n    TreeTableService.prototype.onUIUpdate = function (value) {\n        this.uiUpdateSource.next(value);\n    };\n    TreeTableService = __decorate([\n        core_1.Injectable()\n    ], TreeTableService);\n    return TreeTableService;\n}());\nexports.TreeTableService = TreeTableService;\nvar TreeTable = /** @class */ /*@__PURE__*/ (function () {\n    function TreeTable(el, domHandler, objectUtils, zone, tableService) {\n        this.el = el;\n        this.domHandler = domHandler;\n        this.objectUtils = objectUtils;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.lazy = false;\n        this.first = 0;\n        this.totalRecords = 0;\n        this.pageLinks = 5;\n        this.alwaysShowPaginator = true;\n        this.paginatorPosition = 'bottom';\n        this.defaultSortOrder = 1;\n        this.sortMode = 'single';\n        this.resetPageOnSort = true;\n        this.selectionChange = new core_1.EventEmitter();\n        this.contextMenuSelectionChange = new core_1.EventEmitter();\n        this.contextMenuSelectionMode = \"separate\";\n        this.compareSelectionBy = 'deepEquals';\n        this.loadingIcon = 'pi pi-spinner';\n        this.columnResizeMode = 'fit';\n        this.rowTrackBy = function (index, item) { return item; };\n        this.onNodeExpand = new core_1.EventEmitter();\n        this.onNodeCollapse = new core_1.EventEmitter();\n        this.onPage = new core_1.EventEmitter();\n        this.onSort = new core_1.EventEmitter();\n        this.onLazyLoad = new core_1.EventEmitter();\n        this.sortFunction = new core_1.EventEmitter();\n        this.onColResize = new core_1.EventEmitter();\n        this.onColReorder = new core_1.EventEmitter();\n        this.onNodeSelect = new core_1.EventEmitter();\n        this.onNodeUnselect = new core_1.EventEmitter();\n        this.onContextMenuSelect = new core_1.EventEmitter();\n        this.onHeaderCheckboxToggle = new core_1.EventEmitter();\n        this.onEditInit = new core_1.EventEmitter();\n        this.onEditComplete = new core_1.EventEmitter();\n        this.onEditCancel = new core_1.EventEmitter();\n        this._value = [];\n        this._sortOrder = 1;\n        this.selectionKeys = {};\n    }\n    TreeTable.prototype.ngOnInit = function () {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    };\n    TreeTable.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'caption':\n                    _this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    _this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    _this.bodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    _this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    _this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    _this.colGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    _this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    _this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    _this.paginatorRightTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    _this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    _this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    _this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    _this.frozenColGroupTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    Object.defineProperty(TreeTable.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (val) {\n            this._value = val;\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n            }\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TreeTable.prototype.updateSerializedValue = function () {\n        this.serializedValue = [];\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.value, 0, true);\n    };\n    TreeTable.prototype.serializeNodes = function (parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n                var node = nodes_1[_i];\n                node.parent = parent;\n                var rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n            }\n        }\n    };\n    TreeTable.prototype.serializePageNodes = function () {\n        this.serializedValue = [];\n        if (this.value && this.value.length) {\n            var first = this.lazy ? 0 : this.first;\n            for (var i = first; i < (first + this.rows); i++) {\n                var node = this.value[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    };\n    Object.defineProperty(TreeTable.prototype, \"sortField\", {\n        get: function () {\n            return this._sortField;\n        },\n        set: function (val) {\n            this._sortField = val;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeTable.prototype, \"sortOrder\", {\n        get: function () {\n            return this._sortOrder;\n        },\n        set: function (val) {\n            this._sortOrder = val;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeTable.prototype, \"multiSortMeta\", {\n        get: function () {\n            return this._multiSortMeta;\n        },\n        set: function (val) {\n            this._multiSortMeta = val;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TreeTable.prototype, \"selection\", {\n        get: function () {\n            return this._selection;\n        },\n        set: function (val) {\n            this._selection = val;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TreeTable.prototype.updateSelectionKeys = function () {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (var _i = 0, _a = this._selection; _i < _a.length; _i++) {\n                    var data = _a[_i];\n                    this.selectionKeys[String(this.objectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(this.objectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    };\n    TreeTable.prototype.onPageChange = function (event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onUIUpdate(this.value);\n    };\n    TreeTable.prototype.sort = function (event) {\n        var originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n        }\n        if (this.sortMode === 'multiple') {\n            var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            var sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    };\n    TreeTable.prototype.sortSingle = function () {\n        if (this.sortField && this.sortOrder) {\n            if (this.resetPageOnSort) {\n                this.first = 0;\n            }\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n            }\n            var sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    };\n    TreeTable.prototype.sortNodes = function (nodes) {\n        var _this = this;\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort(function (node1, node2) {\n                var value1 = _this.objectUtils.resolveFieldData(node1.data, _this.sortField);\n                var value2 = _this.objectUtils.resolveFieldData(node2.data, _this.sortField);\n                var result = null;\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n                return (_this.sortOrder * result);\n            });\n        }\n        for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n            var node = nodes_2[_i];\n            this.sortNodes(node.children);\n        }\n    };\n    TreeTable.prototype.sortMultiple = function () {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortMultipleNodes(this.value);\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n            this.updateSerializedValue();\n        }\n    };\n    TreeTable.prototype.sortMultipleNodes = function (nodes) {\n        var _this = this;\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            this.value.sort(function (node1, node2) {\n                return _this.multisortField(node1, node2, _this.multiSortMeta, 0);\n            });\n        }\n        for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n            var node = nodes_3[_i];\n            this.sortMultipleNodes(node.children);\n        }\n    };\n    TreeTable.prototype.multisortField = function (node1, node2, multiSortMeta, index) {\n        var value1 = this.objectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        var value2 = this.objectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        var result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true }));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n        return (multiSortMeta[index].order * result);\n    };\n    TreeTable.prototype.getSortMeta = function (field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (var i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    };\n    TreeTable.prototype.isSorted = function (field) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            var sorted = false;\n            if (this.multiSortMeta) {\n                for (var i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    };\n    TreeTable.prototype.createLazyLoadMetadata = function () {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            multiSortMeta: this.multiSortMeta\n        };\n    };\n    TreeTable.prototype.isEmpty = function () {\n        return this.value == null || this.value.length == 0;\n    };\n    TreeTable.prototype.onColumnResizeBegin = function (event) {\n        var containerLeft = this.domHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    };\n    TreeTable.prototype.onColumnResize = function (event) {\n        var containerLeft = this.domHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.domHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    };\n    TreeTable.prototype.onColumnResizeEnd = function (event, column) {\n        var delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        var columnWidth = column.offsetWidth;\n        var newColumnWidth = columnWidth + delta;\n        var minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                var nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    var nextColumnWidth = nextColumn.offsetWidth - delta;\n                    var nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            var scrollableView = this.findParentScrollableView(column);\n                            var scrollableBodyTable = this.domHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\n                            var scrollableHeaderTable = this.domHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                            var scrollableFooterTable = this.domHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                            var resizeColumnIndex = this.domHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    var scrollableView = this.findParentScrollableView(column);\n                    var scrollableBodyTable = this.domHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-body-table');\n                    var scrollableHeaderTable = this.domHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-header-table');\n                    var scrollableFooterTable = this.domHandler.findSingle(scrollableView, 'table.ui-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    }\n                    var resizeColumnIndex = this.domHandler.index(column);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    var containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        this.domHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    };\n    TreeTable.prototype.findParentScrollableView = function (column) {\n        if (column) {\n            var parent_1 = column.parentElement;\n            while (parent_1 && !this.domHandler.hasClass(parent_1, 'ui-table-scrollable-view')) {\n                parent_1 = parent_1.parentElement;\n            }\n            return parent_1;\n        }\n        else {\n            return null;\n        }\n    };\n    TreeTable.prototype.resizeColGroup = function (table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                var col = colGroup.children[resizeColumnIndex];\n                var nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    };\n    TreeTable.prototype.onColumnDragStart = function (event, columnElement) {\n        this.reorderIconWidth = this.domHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = this.domHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    };\n    TreeTable.prototype.onColumnDragEnter = function (event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            var containerOffset = this.domHandler.getOffset(this.containerViewChild.nativeElement);\n            var dropHeaderOffset = this.domHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                var targetLeft = dropHeaderOffset.left - containerOffset.left;\n                var targetTop = containerOffset.top - dropHeaderOffset.top;\n                var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    };\n    TreeTable.prototype.onColumnDragLeave = function (event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    };\n    TreeTable.prototype.onColumnDrop = function (event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            var dragIndex = this.domHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            var dropIndex = this.domHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            var allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop) {\n                this.objectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    };\n    TreeTable.prototype.handleRowClick = function (event) {\n        var targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (this.domHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            var rowNode = event.rowNode;\n            var selected = this.isSelected(rowNode.node);\n            var metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n            if (metaSelection) {\n                var metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        var selectionIndex_1 = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_1; });\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection || [];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n                        this._selection = this.selection.concat([rowNode.node]);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        var selectionIndex_2 = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter(function (val, i) { return i != selectionIndex_2; });\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? this.selection.concat([rowNode.node]) : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    };\n    TreeTable.prototype.handleRowTouchEnd = function (event) {\n        this.rowTouched = true;\n    };\n    TreeTable.prototype.handleRowRightClick = function (event) {\n        if (this.contextMenu) {\n            var node = event.rowNode.node;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                var selected = this.isSelected(node);\n                var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n            }\n        }\n    };\n    TreeTable.prototype.toggleNodeWithCheckbox = function (event) {\n        this.preventSelectionSetterPropagation = true;\n        var node = event.rowNode.node;\n        var selected = this.isSelected(node);\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({ originalEvent: event, node: node });\n        }\n        this.tableService.onSelectionChange();\n    };\n    TreeTable.prototype.toggleNodesWithCheckbox = function (event, check) {\n        if (check) {\n            if (this.value && this.value.length) {\n                for (var _i = 0, _a = this.value; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    };\n    TreeTable.prototype.propagateSelectionUp = function (node, select) {\n        if (node.children && node.children.length) {\n            var selectedChildCount = 0;\n            var childPartialSelected = false;\n            var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (this.isSelected(child))\n                    selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            if (select && selectedChildCount == node.children.length) {\n                this._selection = (this.selection || []).concat([node]);\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    var index_1 = this.findIndexInSelection(node);\n                    if (index_1 >= 0) {\n                        this._selection = this.selection.filter(function (val, i) { return i != index_1; });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n        var parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    };\n    TreeTable.prototype.propagateSelectionDown = function (node, select) {\n        var index = this.findIndexInSelection(node);\n        var dataKeyValue = this.dataKey ? String(this.objectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (select && index == -1) {\n            this._selection = (this.selection || []).concat([node]);\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection = this.selection.filter(function (val, i) { return i != index; });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        node.partialSelected = false;\n        if (node.children && node.children.length) {\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    };\n    TreeTable.prototype.isSelected = function (node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[this.objectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n        return false;\n    };\n    TreeTable.prototype.findIndexInSelection = function (node) {\n        var index = -1;\n        if (this.selection && this.selection.length) {\n            for (var i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    TreeTable.prototype.isSingleSelectionMode = function () {\n        return this.selectionMode === 'single';\n    };\n    TreeTable.prototype.isMultipleSelectionMode = function () {\n        return this.selectionMode === 'multiple';\n    };\n    TreeTable.prototype.equals = function (node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : this.objectUtils.equals(node1.data, node2.data, this.dataKey);\n    };\n    TreeTable.prototype.reset = function () {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    };\n    TreeTable.prototype.ngOnDestroy = function () {\n        this.editingCell = null;\n        this.initialized = null;\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], TreeTable.prototype, \"columns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeTable.prototype, \"style\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"styleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"autoLayout\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"lazy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"paginator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], TreeTable.prototype, \"rows\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], TreeTable.prototype, \"first\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], TreeTable.prototype, \"totalRecords\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], TreeTable.prototype, \"pageLinks\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], TreeTable.prototype, \"rowsPerPageOptions\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"alwaysShowPaginator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"paginatorPosition\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeTable.prototype, \"paginatorDropdownAppendTo\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], TreeTable.prototype, \"defaultSortOrder\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"sortMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"resetPageOnSort\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"customSort\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"selectionMode\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"selectionChange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeTable.prototype, \"contextMenuSelection\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"contextMenuSelectionChange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"contextMenuSelectionMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"dataKey\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"metaKeySelection\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"compareSelectionBy\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"rowHover\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"loading\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"loadingIcon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"scrollable\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"scrollHeight\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"frozenWidth\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], TreeTable.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"resizableColumns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TreeTable.prototype, \"columnResizeMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TreeTable.prototype, \"reorderableColumns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeTable.prototype, \"contextMenu\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Function)\n    ], TreeTable.prototype, \"rowTrackBy\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onNodeExpand\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onNodeCollapse\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onPage\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onSort\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onLazyLoad\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"sortFunction\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onColResize\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onColReorder\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onNodeSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onNodeUnselect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onContextMenuSelect\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onHeaderCheckboxToggle\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onEditInit\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onEditComplete\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TreeTable.prototype, \"onEditCancel\", void 0);\n    __decorate([\n        core_1.ViewChild('container'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TreeTable.prototype, \"containerViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('resizeHelper'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TreeTable.prototype, \"resizeHelperViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('reorderIndicatorUp'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TreeTable.prototype, \"reorderIndicatorUpViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('reorderIndicatorDown'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TreeTable.prototype, \"reorderIndicatorDownViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('table'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TreeTable.prototype, \"tableViewChild\", void 0);\n    __decorate([\n        core_1.ContentChildren(shared_1.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], TreeTable.prototype, \"templates\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], TreeTable.prototype, \"value\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TreeTable.prototype, \"sortField\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], TreeTable.prototype, \"sortOrder\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], TreeTable.prototype, \"multiSortMeta\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], TreeTable.prototype, \"selection\", null);\n    TreeTable = __decorate([\n        core_1.Component({\n            selector: 'p-treeTable',\n            template: \"\\n        <div #container [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\"\\n                [ngClass]=\\\"{'ui-treetable ui-widget': true, 'ui-treetable-auto-layout': autoLayout, 'ui-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\\n                'ui-treetable-resizable': resizableColumns, 'ui-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit')}\\\">\\n            <div class=\\\"ui-treetable-loading ui-widget-overlay\\\" *ngIf=\\\"loading\\\"></div>\\n            <div class=\\\"ui-treetable-loading-content\\\" *ngIf=\\\"loading\\\">\\n                <i [class]=\\\"'ui-treetable-loading-icon pi-spin ' + loadingIcon\\\"></i>\\n            </div>\\n            <div *ngIf=\\\"captionTemplate\\\" class=\\\"ui-treetable-caption ui-widget-header\\\">\\n                <ng-container *ngTemplateOutlet=\\\"captionTemplate\\\"></ng-container>\\n            </div>\\n            <p-paginator [rows]=\\\"rows\\\" [first]=\\\"first\\\" [totalRecords]=\\\"totalRecords\\\" [pageLinkSize]=\\\"pageLinks\\\" styleClass=\\\"ui-paginator-top\\\" [alwaysShow]=\\\"alwaysShowPaginator\\\"\\n                (onPageChange)=\\\"onPageChange($event)\\\" [rowsPerPageOptions]=\\\"rowsPerPageOptions\\\" *ngIf=\\\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\\\"\\n                [templateLeft]=\\\"paginatorLeftTemplate\\\" [templateRight]=\\\"paginatorRightTemplate\\\" [dropdownAppendTo]=\\\"paginatorDropdownAppendTo\\\"></p-paginator>\\n            \\n            <div class=\\\"ui-treetable-wrapper\\\" *ngIf=\\\"!scrollable\\\">\\n                <table #table class=\\\"ui-treetable-table\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <thead class=\\\"ui-treetable-thead\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"headerTemplate; context: {$implicit: columns}\\\"></ng-container>\\n                    </thead>\\n                    <tfoot class=\\\"ui-treetable-tfoot\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"footerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </tfoot>\\n                    <tbody class=\\\"ui-treetable-tbody\\\" [pTreeTableBody]=\\\"columns\\\" [pTreeTableBodyTemplate]=\\\"bodyTemplate\\\"></tbody>\\n                </table>\\n            </div>\\n\\n            <div class=\\\"ui-treetable-scrollable-wrapper\\\" *ngIf=\\\"scrollable\\\">\\n               <div class=\\\"ui-treetable-frozen-view\\\" *ngIf=\\\"frozenColumns||frozenBodyTemplate\\\" [ttScrollableView]=\\\"frozenColumns\\\" [frozen]=\\\"true\\\" [ngStyle]=\\\"{width: frozenWidth}\\\" [scrollHeight]=\\\"scrollHeight\\\"></div>\\n               <div [ttScrollableView]=\\\"columns\\\" [frozen]=\\\"false\\\" [scrollHeight]=\\\"scrollHeight\\\"></div>\\n            </div>\\n\\n            <p-paginator [rows]=\\\"rows\\\" [first]=\\\"first\\\" [totalRecords]=\\\"totalRecords\\\" [pageLinkSize]=\\\"pageLinks\\\" styleClass=\\\"ui-paginator-bottom\\\" [alwaysShow]=\\\"alwaysShowPaginator\\\"\\n                (onPageChange)=\\\"onPageChange($event)\\\" [rowsPerPageOptions]=\\\"rowsPerPageOptions\\\" *ngIf=\\\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\\\"\\n                [templateLeft]=\\\"paginatorLeftTemplate\\\" [templateRight]=\\\"paginatorRightTemplate\\\" [dropdownAppendTo]=\\\"paginatorDropdownAppendTo\\\"></p-paginator>\\n            <div *ngIf=\\\"summaryTemplate\\\" class=\\\"ui-treetable-summary ui-widget-header\\\">\\n                <ng-container *ngTemplateOutlet=\\\"summaryTemplate\\\"></ng-container>\\n            </div>\\n\\n            <div #resizeHelper class=\\\"ui-column-resizer-helper ui-state-highlight\\\" style=\\\"display:none\\\" *ngIf=\\\"resizableColumns\\\"></div>\\n\\n            <span #reorderIndicatorUp class=\\\"pi pi-arrow-down ui-table-reorder-indicator-up\\\" *ngIf=\\\"reorderableColumns\\\"></span>\\n            <span #reorderIndicatorDown class=\\\"pi pi-arrow-up ui-table-reorder-indicator-down\\\" *ngIf=\\\"reorderableColumns\\\"></span>\\n        </div>\\n    \",\n            providers: [domhandler_1.DomHandler, objectutils_1.ObjectUtils, TreeTableService]\n        })\n    ], TreeTable);\n    return TreeTable;\n}());\nexports.TreeTable = TreeTable;\nvar TTBody = /** @class */ /*@__PURE__*/ (function () {\n    function TTBody(tt) {\n        this.tt = tt;\n    }\n    __decorate([\n        core_1.Input(\"pTreeTableBody\"),\n        __metadata(\"design:type\", Array)\n    ], TTBody.prototype, \"columns\", void 0);\n    __decorate([\n        core_1.Input(\"pTreeTableBodyTemplate\"),\n        __metadata(\"design:type\", core_1.TemplateRef)\n    ], TTBody.prototype, \"template\", void 0);\n    TTBody = __decorate([\n        core_1.Component({\n            selector: '[pTreeTableBody]',\n            template: \"\\n        <ng-template ngFor let-serializedNode let-rowIndex=\\\"index\\\" [ngForOf]=\\\"tt.serializedValue\\\" [ngForTrackBy]=\\\"tt.rowTrackBy\\\">\\n            <ng-container *ngIf=\\\"serializedNode.visible\\\">\\n                <ng-container *ngTemplateOutlet=\\\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\\\"></ng-container>\\n            </ng-container>\\n        </ng-template>\\n        <ng-container *ngIf=\\\"tt.isEmpty()\\\">\\n            <ng-container *ngTemplateOutlet=\\\"tt.emptyMessageTemplate; context: {$implicit: columns}\\\"></ng-container>\\n        </ng-container>\\n    \"\n        })\n    ], TTBody);\n    return TTBody;\n}());\nexports.TTBody = TTBody;\nvar TTScrollableView = /** @class */ /*@__PURE__*/ (function () {\n    function TTScrollableView(tt, el, domHandler, zone) {\n        var _this = this;\n        this.tt = tt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(function () {\n            _this.zone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    _this.alignScrollBar();\n                }, 50);\n            });\n        });\n        this.initialized = false;\n    }\n    Object.defineProperty(TTScrollableView.prototype, \"scrollHeight\", {\n        get: function () {\n            return this._scrollHeight;\n        },\n        set: function (val) {\n            this._scrollHeight = val;\n            this.setScrollHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TTScrollableView.prototype.ngAfterViewChecked = function () {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.initialized = true;\n        }\n    };\n    TTScrollableView.prototype.ngAfterViewInit = function () {\n        this.bindEvents();\n        this.setScrollHeight();\n        this.alignScrollBar();\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                this.domHandler.addClass(this.el.nativeElement, 'ui-treetable-unfrozen-view');\n            }\n            if (this.tt.frozenWidth) {\n                this.el.nativeElement.style.left = this.tt.frozenWidth;\n                this.el.nativeElement.style.width = 'calc(100% - ' + this.tt.frozenWidth + ')';\n            }\n            var frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                this.frozenSiblingBody = this.domHandler.findSingle(frozenView, '.ui-treetable-scrollable-body');\n            }\n        }\n        else {\n            this.scrollBodyViewChild.nativeElement.style.paddingBottom = this.domHandler.calculateScrollbarWidth() + 'px';\n        }\n    };\n    TTScrollableView.prototype.bindEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            var scrollBarWidth = _this.domHandler.calculateScrollbarWidth();\n            if (_this.scrollHeaderViewChild && _this.scrollHeaderViewChild.nativeElement) {\n                _this.headerScrollListener = _this.onHeaderScroll.bind(_this);\n                _this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', _this.headerScrollListener);\n            }\n            if (_this.scrollFooterViewChild && _this.scrollFooterViewChild.nativeElement) {\n                _this.footerScrollListener = _this.onFooterScroll.bind(_this);\n                _this.scrollFooterViewChild.nativeElement.addEventListener('scroll', _this.footerScrollListener);\n            }\n            if (!_this.frozen) {\n                _this.bodyScrollListener = _this.onBodyScroll.bind(_this);\n                _this.scrollBodyViewChild.nativeElement.addEventListener('scroll', _this.bodyScrollListener);\n            }\n        });\n    };\n    TTScrollableView.prototype.unbindEvents = function () {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n        this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n    };\n    TTScrollableView.prototype.onHeaderScroll = function (event) {\n        this.scrollHeaderViewChild.nativeElement.scrollLeft = 0;\n    };\n    TTScrollableView.prototype.onFooterScroll = function (event) {\n        this.scrollFooterViewChild.nativeElement.scrollLeft = 0;\n    };\n    TTScrollableView.prototype.onBodyScroll = function (event) {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\n        }\n    };\n    TTScrollableView.prototype.setScrollHeight = function () {\n        if (this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            if (this.scrollHeight.indexOf('%') !== -1) {\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\n                this.scrollBodyViewChild.nativeElement.style.height = '100px'; //temporary height to calculate static height\n                var containerHeight = this.domHandler.getOuterHeight(this.tt.el.nativeElement.children[0]);\n                var relativeHeight = this.domHandler.getOuterHeight(this.tt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\n                var staticHeight = containerHeight - 100; //total height of headers, footers, paginators\n                var scrollBodyHeight = (relativeHeight - staticHeight);\n                if (this.frozen) {\n                    scrollBodyHeight -= this.domHandler.calculateScrollbarWidth();\n                }\n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\n            }\n            else {\n                if (this.frozen)\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = (parseInt(this.scrollHeight) - this.domHandler.calculateScrollbarWidth()) + 'px';\n                else\n                    this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\n            }\n        }\n    };\n    TTScrollableView.prototype.hasVerticalOverflow = function () {\n        return this.domHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > this.domHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    };\n    TTScrollableView.prototype.alignScrollBar = function () {\n        if (!this.frozen) {\n            var scrollBarWidth = this.hasVerticalOverflow() ? this.domHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    };\n    TTScrollableView.prototype.ngOnDestroy = function () {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.initialized = false;\n    };\n    __decorate([\n        core_1.Input(\"ttScrollableView\"),\n        __metadata(\"design:type\", Array)\n    ], TTScrollableView.prototype, \"columns\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTScrollableView.prototype, \"frozen\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollHeader'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTScrollableView.prototype, \"scrollHeaderViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollHeaderBox'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTScrollableView.prototype, \"scrollHeaderBoxViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollBody'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTScrollableView.prototype, \"scrollBodyViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollTable'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTScrollableView.prototype, \"scrollTableViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollFooter'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTScrollableView.prototype, \"scrollFooterViewChild\", void 0);\n    __decorate([\n        core_1.ViewChild('scrollFooterBox'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTScrollableView.prototype, \"scrollFooterBoxViewChild\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], TTScrollableView.prototype, \"scrollHeight\", null);\n    TTScrollableView = __decorate([\n        core_1.Component({\n            selector: '[ttScrollableView]',\n            template: \"\\n        <div #scrollHeader class=\\\"ui-treetable-scrollable-header ui-widget-header\\\">\\n            <div #scrollHeaderBox class=\\\"ui-treetable-scrollable-header-box\\\">\\n                <table class=\\\"ui-treetable-scrollable-header-table\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <thead class=\\\"ui-treetable-thead\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </thead>\\n                </table>\\n            </div>\\n        </div>\\n        <div #scrollBody class=\\\"ui-treetable-scrollable-body\\\">\\n            <table #scrollTable class=\\\"ui-treetable-scrollable-body-table\\\">\\n                <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                <tbody class=\\\"ui-treetable-tbody\\\" [pTreeTableBody]=\\\"columns\\\" [pTreeTableBodyTemplate]=\\\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\\\"></tbody>\\n            </table>\\n        </div>\\n        <div #scrollFooter *ngIf=\\\"tt.footerTemplate\\\" class=\\\"ui-treetable-scrollable-footer ui-widget-header\\\">\\n            <div #scrollFooterBox class=\\\"ui-treetable-scrollable-footer-box\\\">\\n                <table class=\\\"ui-treetable-scrollable-footer-table\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    <tfoot class=\\\"ui-treetable-tfoot\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\\\"></ng-container>\\n                    </tfoot>\\n                </table>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], TTScrollableView);\n    return TTScrollableView;\n}());\nexports.TTScrollableView = TTScrollableView;\nvar TTSortableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function TTSortableColumn(tt, domHandler) {\n        var _this = this;\n        this.tt = tt;\n        this.domHandler = domHandler;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(function (sortMeta) {\n                _this.updateSortState();\n            });\n        }\n    }\n    TTSortableColumn.prototype.ngOnInit = function () {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    };\n    TTSortableColumn.prototype.updateSortState = function () {\n        this.sorted = this.tt.isSorted(this.field);\n    };\n    TTSortableColumn.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            this.domHandler.clearSelection();\n        }\n    };\n    TTSortableColumn.prototype.isEnabled = function () {\n        return this.ttSortableColumnDisabled !== true;\n    };\n    TTSortableColumn.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"ttSortableColumn\"),\n        __metadata(\"design:type\", String)\n    ], TTSortableColumn.prototype, \"field\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTSortableColumn.prototype, \"ttSortableColumnDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [MouseEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTSortableColumn.prototype, \"onClick\", null);\n    TTSortableColumn = __decorate([\n        core_1.Directive({\n            selector: '[ttSortableColumn]',\n            providers: [domhandler_1.DomHandler],\n            host: {\n                '[class.ui-sortable-column]': 'isEnabled()',\n                '[class.ui-state-highlight]': 'sorted'\n            }\n        })\n    ], TTSortableColumn);\n    return TTSortableColumn;\n}());\nexports.TTSortableColumn = TTSortableColumn;\nvar TTSortIcon = /** @class */ /*@__PURE__*/ (function () {\n    function TTSortIcon(tt) {\n        var _this = this;\n        this.tt = tt;\n        this.subscription = this.tt.tableService.sortSource$.subscribe(function (sortMeta) {\n            _this.updateSortState();\n        });\n    }\n    TTSortIcon.prototype.ngOnInit = function () {\n        this.updateSortState();\n    };\n    TTSortIcon.prototype.onClick = function (event) {\n        event.preventDefault();\n    };\n    TTSortIcon.prototype.updateSortState = function () {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            var sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    };\n    TTSortIcon.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TTSortIcon.prototype, \"field\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TTSortIcon.prototype, \"ariaLabelDesc\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TTSortIcon.prototype, \"ariaLabelAsc\", void 0);\n    TTSortIcon = __decorate([\n        core_1.Component({\n            selector: 'p-treeTableSortIcon',\n            template: \"\\n        <a href=\\\"#\\\" (click)=\\\"onClick($event)\\\" [attr.aria-label]=\\\" sortOrder === 1 ? ariaLabelAsc : sortOrder === -1 ? ariaLabelDesc : '' \\\">\\n            <i class=\\\"ui-sortable-column-icon pi pi-fw\\\" [ngClass]=\\\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\\\"></i>\\n        </a>\\n    \"\n        })\n    ], TTSortIcon);\n    return TTSortIcon;\n}());\nexports.TTSortIcon = TTSortIcon;\nvar TTResizableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function TTResizableColumn(tt, el, domHandler, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    TTResizableColumn.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this.isEnabled()) {\n            this.domHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n            this.zone.runOutsideAngular(function () {\n                _this.resizerMouseDownListener = _this.onMouseDown.bind(_this);\n                _this.resizer.addEventListener('mousedown', _this.resizerMouseDownListener);\n            });\n        }\n    };\n    TTResizableColumn.prototype.bindDocumentEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.documentMouseMoveListener = _this.onDocumentMouseMove.bind(_this);\n            document.addEventListener('mousemove', _this.documentMouseMoveListener);\n            _this.documentMouseUpListener = _this.onDocumentMouseUp.bind(_this);\n            document.addEventListener('mouseup', _this.documentMouseUpListener);\n        });\n    };\n    TTResizableColumn.prototype.unbindDocumentEvents = function () {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    };\n    TTResizableColumn.prototype.onMouseDown = function (event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    };\n    TTResizableColumn.prototype.onDocumentMouseMove = function (event) {\n        this.tt.onColumnResize(event);\n    };\n    TTResizableColumn.prototype.onDocumentMouseUp = function (event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    };\n    TTResizableColumn.prototype.isEnabled = function () {\n        return this.ttResizableColumnDisabled !== true;\n    };\n    TTResizableColumn.prototype.ngOnDestroy = function () {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        this.unbindDocumentEvents();\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTResizableColumn.prototype, \"ttResizableColumnDisabled\", void 0);\n    TTResizableColumn = __decorate([\n        core_1.Directive({\n            selector: '[ttResizableColumn]'\n        })\n    ], TTResizableColumn);\n    return TTResizableColumn;\n}());\nexports.TTResizableColumn = TTResizableColumn;\nvar TTReorderableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function TTReorderableColumn(tt, el, domHandler, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    TTReorderableColumn.prototype.ngAfterViewInit = function () {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    };\n    TTReorderableColumn.prototype.bindEvents = function () {\n        var _this = this;\n        this.zone.runOutsideAngular(function () {\n            _this.mouseDownListener = _this.onMouseDown.bind(_this);\n            _this.el.nativeElement.addEventListener('mousedown', _this.mouseDownListener);\n            _this.dragStartListener = _this.onDragStart.bind(_this);\n            _this.el.nativeElement.addEventListener('dragstart', _this.dragStartListener);\n            _this.dragOverListener = _this.onDragEnter.bind(_this);\n            _this.el.nativeElement.addEventListener('dragover', _this.dragOverListener);\n            _this.dragEnterListener = _this.onDragEnter.bind(_this);\n            _this.el.nativeElement.addEventListener('dragenter', _this.dragEnterListener);\n            _this.dragLeaveListener = _this.onDragLeave.bind(_this);\n            _this.el.nativeElement.addEventListener('dragleave', _this.dragLeaveListener);\n        });\n    };\n    TTReorderableColumn.prototype.unbindEvents = function () {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    };\n    TTReorderableColumn.prototype.onMouseDown = function (event) {\n        if (event.target.nodeName === 'INPUT' || this.domHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    };\n    TTReorderableColumn.prototype.onDragStart = function (event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    };\n    TTReorderableColumn.prototype.onDragOver = function (event) {\n        event.preventDefault();\n    };\n    TTReorderableColumn.prototype.onDragEnter = function (event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    };\n    TTReorderableColumn.prototype.onDragLeave = function (event) {\n        this.tt.onColumnDragLeave(event);\n    };\n    TTReorderableColumn.prototype.onDrop = function (event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    };\n    TTReorderableColumn.prototype.isEnabled = function () {\n        return this.ttReorderableColumnDisabled !== true;\n    };\n    TTReorderableColumn.prototype.ngOnDestroy = function () {\n        this.unbindEvents();\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTReorderableColumn.prototype, \"ttReorderableColumnDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('drop', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTReorderableColumn.prototype, \"onDrop\", null);\n    TTReorderableColumn = __decorate([\n        core_1.Directive({\n            selector: '[ttReorderableColumn]'\n        })\n    ], TTReorderableColumn);\n    return TTReorderableColumn;\n}());\nexports.TTReorderableColumn = TTReorderableColumn;\nvar TTSelectableRow = /** @class */ /*@__PURE__*/ (function () {\n    function TTSelectableRow(tt, domHandler, tableService) {\n        var _this = this;\n        this.tt = tt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(function () {\n                _this.selected = _this.tt.isSelected(_this.rowNode.node);\n            });\n        }\n    }\n    TTSelectableRow.prototype.ngOnInit = function () {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    };\n    TTSelectableRow.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    };\n    TTSelectableRow.prototype.onTouchEnd = function (event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    };\n    TTSelectableRow.prototype.isEnabled = function () {\n        return this.ttSelectableRowDisabled !== true;\n    };\n    TTSelectableRow.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"ttSelectableRow\"),\n        __metadata(\"design:type\", Object)\n    ], TTSelectableRow.prototype, \"rowNode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTSelectableRow.prototype, \"ttSelectableRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTSelectableRow.prototype, \"onClick\", null);\n    __decorate([\n        core_1.HostListener('touchend', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTSelectableRow.prototype, \"onTouchEnd\", null);\n    TTSelectableRow = __decorate([\n        core_1.Directive({\n            selector: '[ttSelectableRow]',\n            providers: [domhandler_1.DomHandler],\n            host: {\n                '[class.ui-state-highlight]': 'selected'\n            }\n        })\n    ], TTSelectableRow);\n    return TTSelectableRow;\n}());\nexports.TTSelectableRow = TTSelectableRow;\nvar TTSelectableRowDblClick = /** @class */ /*@__PURE__*/ (function () {\n    function TTSelectableRowDblClick(tt, domHandler, tableService) {\n        var _this = this;\n        this.tt = tt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(function () {\n                _this.selected = _this.tt.isSelected(_this.rowNode.node);\n            });\n        }\n    }\n    TTSelectableRowDblClick.prototype.ngOnInit = function () {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    };\n    TTSelectableRowDblClick.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    };\n    TTSelectableRowDblClick.prototype.isEnabled = function () {\n        return this.ttSelectableRowDisabled !== true;\n    };\n    TTSelectableRowDblClick.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"ttSelectableRowDblClick\"),\n        __metadata(\"design:type\", Object)\n    ], TTSelectableRowDblClick.prototype, \"rowNode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTSelectableRowDblClick.prototype, \"ttSelectableRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('dblclick', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTSelectableRowDblClick.prototype, \"onClick\", null);\n    TTSelectableRowDblClick = __decorate([\n        core_1.Directive({\n            selector: '[ttSelectableRowDblClick]',\n            providers: [domhandler_1.DomHandler],\n            host: {\n                '[class.ui-state-highlight]': 'selected'\n            }\n        })\n    ], TTSelectableRowDblClick);\n    return TTSelectableRowDblClick;\n}());\nexports.TTSelectableRowDblClick = TTSelectableRowDblClick;\nvar TTContextMenuRow = /** @class */ /*@__PURE__*/ (function () {\n    function TTContextMenuRow(tt, tableService) {\n        var _this = this;\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe(function (node) {\n                _this.selected = _this.tt.equals(_this.rowNode.node, node);\n            });\n        }\n    }\n    TTContextMenuRow.prototype.onContextMenu = function (event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n            event.preventDefault();\n        }\n    };\n    TTContextMenuRow.prototype.isEnabled = function () {\n        return this.ttContextMenuRowDisabled !== true;\n    };\n    TTContextMenuRow.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(\"ttContextMenuRow\"),\n        __metadata(\"design:type\", Object)\n    ], TTContextMenuRow.prototype, \"rowNode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTContextMenuRow.prototype, \"ttContextMenuRowDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('contextmenu', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Event]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTContextMenuRow.prototype, \"onContextMenu\", null);\n    TTContextMenuRow = __decorate([\n        core_1.Directive({\n            selector: '[ttContextMenuRow]',\n            host: {\n                '[class.ui-contextmenu-selected]': 'selected'\n            }\n        })\n    ], TTContextMenuRow);\n    return TTContextMenuRow;\n}());\nexports.TTContextMenuRow = TTContextMenuRow;\nvar TTCheckbox = /** @class */ /*@__PURE__*/ (function () {\n    function TTCheckbox(tt, domHandler, tableService) {\n        var _this = this;\n        this.tt = tt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(function () {\n            _this.checked = _this.tt.isSelected(_this.rowNode.node);\n        });\n    }\n    TTCheckbox.prototype.ngOnInit = function () {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    };\n    TTCheckbox.prototype.onClick = function (event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        this.domHandler.clearSelection();\n    };\n    TTCheckbox.prototype.onFocus = function () {\n        this.domHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TTCheckbox.prototype.onBlur = function () {\n        this.domHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TTCheckbox.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTCheckbox.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(\"value\"),\n        __metadata(\"design:type\", Object)\n    ], TTCheckbox.prototype, \"rowNode\", void 0);\n    __decorate([\n        core_1.ViewChild('box'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTCheckbox.prototype, \"boxViewChild\", void 0);\n    TTCheckbox = __decorate([\n        core_1.Component({\n            selector: 'p-treeTableCheckbox',\n            template: \"\\n        <div class=\\\"ui-chkbox ui-treetable-chkbox ui-widget\\\" (click)=\\\"onClick($event)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input type=\\\"checkbox\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'ui-chkbox-box ui-widget ui-state-default':true,\\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\\\">\\n                <span class=\\\"ui-chkbox-icon ui-clickable pi\\\" [ngClass]=\\\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\\\"></span>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], TTCheckbox);\n    return TTCheckbox;\n}());\nexports.TTCheckbox = TTCheckbox;\nvar TTHeaderCheckbox = /** @class */ /*@__PURE__*/ (function () {\n    function TTHeaderCheckbox(tt, domHandler, tableService) {\n        var _this = this;\n        this.tt = tt;\n        this.domHandler = domHandler;\n        this.tableService = tableService;\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(function () {\n            _this.checked = _this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(function () {\n            _this.checked = _this.updateCheckedState();\n        });\n    }\n    TTHeaderCheckbox.prototype.ngOnInit = function () {\n        this.checked = this.updateCheckedState();\n    };\n    TTHeaderCheckbox.prototype.onClick = function (event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        this.domHandler.clearSelection();\n    };\n    TTHeaderCheckbox.prototype.onFocus = function () {\n        this.domHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TTHeaderCheckbox.prototype.onBlur = function () {\n        this.domHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    };\n    TTHeaderCheckbox.prototype.ngOnDestroy = function () {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    };\n    TTHeaderCheckbox.prototype.updateCheckedState = function () {\n        var checked;\n        if (this.tt.value) {\n            for (var _i = 0, _a = this.tt.value; _i < _a.length; _i++) {\n                var node = _a[_i];\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n        return checked;\n    };\n    __decorate([\n        core_1.ViewChild('box'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], TTHeaderCheckbox.prototype, \"boxViewChild\", void 0);\n    TTHeaderCheckbox = __decorate([\n        core_1.Component({\n            selector: 'p-treeTableHeaderCheckbox',\n            template: \"\\n        <div class=\\\"ui-chkbox ui-treetable-header-chkbox ui-widget\\\" (click)=\\\"onClick($event, cb.checked)\\\">\\n            <div class=\\\"ui-helper-hidden-accessible\\\">\\n                <input #cb type=\\\"checkbox\\\" [checked]=\\\"checked\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\" [disabled]=\\\"!tt.value||tt.value.length === 0\\\">\\n            </div>\\n            <div #box [ngClass]=\\\"{'ui-chkbox-box ui-widget ui-state-default':true,\\n                'ui-state-active':checked, 'ui-state-disabled': (!tt.value || tt.value.length === 0)}\\\">\\n                <span class=\\\"ui-chkbox-icon ui-clickable\\\" [ngClass]=\\\"{'pi pi-check':checked}\\\"></span>\\n            </div>\\n        </div>\\n    \"\n        })\n    ], TTHeaderCheckbox);\n    return TTHeaderCheckbox;\n}());\nexports.TTHeaderCheckbox = TTHeaderCheckbox;\nvar TTEditableColumn = /** @class */ /*@__PURE__*/ (function () {\n    function TTEditableColumn(tt, el, domHandler, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.domHandler = domHandler;\n        this.zone = zone;\n    }\n    TTEditableColumn.prototype.ngAfterViewInit = function () {\n        if (this.isEnabled()) {\n            this.domHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    };\n    TTEditableColumn.prototype.isValid = function () {\n        return (this.tt.editingCell && this.domHandler.find(this.tt.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    };\n    TTEditableColumn.prototype.onClick = function (event) {\n        if (this.isEnabled()) {\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.isValid()) {\n                        return;\n                    }\n                    this.domHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    };\n    TTEditableColumn.prototype.openCell = function () {\n        var _this = this;\n        this.tt.editingCell = this.el.nativeElement;\n        this.domHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data });\n        this.zone.runOutsideAngular(function () {\n            setTimeout(function () {\n                var focusable = _this.domHandler.findSingle(_this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    };\n    TTEditableColumn.prototype.onKeyDown = function (event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.isValid()) {\n                    this.domHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.tt.editingCell = null;\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            else if (event.keyCode == 27) {\n                if (this.isValid()) {\n                    this.domHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\n                    this.tt.editingCell = null;\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    };\n    TTEditableColumn.prototype.findCell = function (element) {\n        if (element) {\n            var cell = element;\n            while (cell && !this.domHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    };\n    TTEditableColumn.prototype.moveToPreviousCell = function (event) {\n        var currentCell = this.findCell(event.target);\n        var row = currentCell.parentElement;\n        var targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            this.domHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    };\n    TTEditableColumn.prototype.moveToNextCell = function (event) {\n        var currentCell = this.findCell(event.target);\n        var row = currentCell.parentElement;\n        var targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            this.domHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    };\n    TTEditableColumn.prototype.findPreviousEditableColumn = function (cell) {\n        var prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            var previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (this.domHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    };\n    TTEditableColumn.prototype.findNextEditableColumn = function (cell) {\n        var nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            var nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (this.domHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    };\n    TTEditableColumn.prototype.isEnabled = function () {\n        return this.pEditableColumnDisabled !== true;\n    };\n    __decorate([\n        core_1.Input(\"pEditableColumn\"),\n        __metadata(\"design:type\", Object)\n    ], TTEditableColumn.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(\"pEditableColumnField\"),\n        __metadata(\"design:type\", Object)\n    ], TTEditableColumn.prototype, \"field\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TTEditableColumn.prototype, \"pEditableColumnDisabled\", void 0);\n    __decorate([\n        core_1.HostListener('click', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [MouseEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTEditableColumn.prototype, \"onClick\", null);\n    __decorate([\n        core_1.HostListener('keydown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [KeyboardEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], TTEditableColumn.prototype, \"onKeyDown\", null);\n    TTEditableColumn = __decorate([\n        core_1.Directive({\n            selector: '[ttEditableColumn]'\n        })\n    ], TTEditableColumn);\n    return TTEditableColumn;\n}());\nexports.TTEditableColumn = TTEditableColumn;\nvar TreeTableCellEditor = /** @class */ /*@__PURE__*/ (function () {\n    function TreeTableCellEditor(tt, editableColumn) {\n        this.tt = tt;\n        this.editableColumn = editableColumn;\n    }\n    TreeTableCellEditor.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'input':\n                    _this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    _this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    __decorate([\n        core_1.ContentChildren(shared_1.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], TreeTableCellEditor.prototype, \"templates\", void 0);\n    TreeTableCellEditor = __decorate([\n        core_1.Component({\n            selector: 'p-treeTableCellEditor',\n            template: \"\\n        <ng-container *ngIf=\\\"tt.editingCell === editableColumn.el.nativeElement\\\">\\n            <ng-container *ngTemplateOutlet=\\\"inputTemplate\\\"></ng-container>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\\\">\\n            <ng-container *ngTemplateOutlet=\\\"outputTemplate\\\"></ng-container>\\n        </ng-container>\\n    \"\n        })\n    ], TreeTableCellEditor);\n    return TreeTableCellEditor;\n}());\nexports.TreeTableCellEditor = TreeTableCellEditor;\nvar TreeTableToggler = /** @class */ /*@__PURE__*/ (function () {\n    function TreeTableToggler(tt) {\n        this.tt = tt;\n    }\n    TreeTableToggler.prototype.onClick = function (event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        event.preventDefault();\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TreeTableToggler.prototype, \"rowNode\", void 0);\n    TreeTableToggler = __decorate([\n        core_1.Component({\n            selector: 'p-treeTableToggler',\n            template: \"\\n        <a href=\\\"#\\\" class=\\\"ui-treetable-toggler\\\" *ngIf=\\\"rowNode.node.leaf === false || rowNode.level !== 0 || rowNode.node.children && rowNode.node.children.length\\\" (click)=\\\"onClick($event)\\\" [style.visibility]=\\\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\\\" [style.marginLeft]=\\\"rowNode.level * 16 + 'px'\\\">\\n            <i [ngClass]=\\\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\\\"></i>\\n        </a>\\n    \"\n        })\n    ], TreeTableToggler);\n    return TreeTableToggler;\n}());\nexports.TreeTableToggler = TreeTableToggler;\nvar TreeTableModule = /** @class */ /*@__PURE__*/ (function () {\n    function TreeTableModule() {\n    }\n    TreeTableModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, paginator_1.PaginatorModule],\n            exports: [TreeTable, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor],\n            declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n        })\n    ], TreeTableModule);\n    return TreeTableModule;\n}());\nexports.TreeTableModule = TreeTableModule;\n",null]}
{"remainingRequest":"C:\\AngularProject\\appsecurite5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\AngularProject\\appsecurite5\\node_modules\\primeng\\components\\tabview\\tabview.js","dependencies":[{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\primeng\\components\\tabview\\tabview.js","mtime":1531393534000},{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531413946556},{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar idx = 0;\nvar TabViewNav = /** @class */ /*@__PURE__*/ (function () {\n    function TabViewNav() {\n        this.orientation = 'top';\n        this.onTabClick = new core_1.EventEmitter();\n        this.onTabCloseClick = new core_1.EventEmitter();\n    }\n    TabViewNav.prototype.getDefaultHeaderClass = function (tab) {\n        var styleClass = 'ui-state-default ui-corner-' + this.orientation;\n        if (tab.headerStyleClass) {\n            styleClass = styleClass + \" \" + tab.headerStyleClass;\n        }\n        return styleClass;\n    };\n    TabViewNav.prototype.clickTab = function (event, tab) {\n        this.onTabClick.emit({\n            originalEvent: event,\n            tab: tab\n        });\n    };\n    TabViewNav.prototype.clickClose = function (event, tab) {\n        this.onTabCloseClick.emit({\n            originalEvent: event,\n            tab: tab\n        });\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], TabViewNav.prototype, \"tabs\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabViewNav.prototype, \"orientation\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TabViewNav.prototype, \"onTabClick\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TabViewNav.prototype, \"onTabCloseClick\", void 0);\n    TabViewNav = __decorate([\n        core_1.Component({\n            selector: '[p-tabViewNav]',\n            host: {\n                '[class.ui-tabview-nav]': 'true',\n                '[class.ui-helper-reset]': 'true',\n                '[class.ui-helper-clearfix]': 'true',\n                '[class.ui-widget-header]': 'true',\n                '[class.ui-corner-all]': 'true'\n            },\n            template: \"\\n        <ng-template ngFor let-tab [ngForOf]=\\\"tabs\\\">\\n            <li [class]=\\\"getDefaultHeaderClass(tab)\\\" [ngStyle]=\\\"tab.headerStyle\\\" role=\\\"presentation\\\"\\n                [ngClass]=\\\"{'ui-tabview-selected ui-state-active': tab.selected, 'ui-state-disabled': tab.disabled}\\\"\\n                (click)=\\\"clickTab($event,tab)\\\" *ngIf=\\\"!tab.closed\\\">\\n                <a [attr.id]=\\\"tab.id + '-label'\\\" href=\\\"#\\\" role=\\\"tab\\\" [attr.aria-selected]=\\\"tab.selected\\\" [attr.aria-controls]=\\\"tab.id\\\">\\n                    <span class=\\\"ui-tabview-left-icon fa\\\" [ngClass]=\\\"tab.leftIcon\\\" *ngIf=\\\"tab.leftIcon\\\"></span>\\n                    <span class=\\\"ui-tabview-title\\\">{{tab.header}}</span>\\n                    <span class=\\\"ui-tabview-right-icon fa\\\" [ngClass]=\\\"tab.rightIcon\\\" *ngIf=\\\"tab.rightIcon\\\"></span>\\n                </a>\\n                <span *ngIf=\\\"tab.closable\\\" class=\\\"ui-tabview-close pi pi-times\\\" (click)=\\\"clickClose($event,tab)\\\"></span>\\n            </li>\\n        </ng-template>\\n    \",\n        })\n    ], TabViewNav);\n    return TabViewNav;\n}());\nexports.TabViewNav = TabViewNav;\nvar TabPanel = /** @class */ /*@__PURE__*/ (function () {\n    function TabPanel(viewContainer) {\n        this.viewContainer = viewContainer;\n        this.cache = true;\n        this.id = \"ui-tabpanel-\" + idx++;\n    }\n    TabPanel.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.templates.forEach(function (item) {\n            switch (item.getType()) {\n                case 'content':\n                    _this.contentTemplate = item.template;\n                    break;\n                default:\n                    _this.contentTemplate = item.template;\n                    break;\n            }\n        });\n    };\n    Object.defineProperty(TabPanel.prototype, \"selected\", {\n        get: function () {\n            return this._selected;\n        },\n        set: function (val) {\n            this._selected = val;\n            this.loaded = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TabPanel.prototype.ngOnDestroy = function () {\n        this.view = null;\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabPanel.prototype, \"header\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TabPanel.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TabPanel.prototype, \"closable\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TabPanel.prototype, \"headerStyle\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabPanel.prototype, \"headerStyleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabPanel.prototype, \"leftIcon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabPanel.prototype, \"rightIcon\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TabPanel.prototype, \"cache\", void 0);\n    __decorate([\n        core_1.ContentChildren(shared_1.PrimeTemplate),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], TabPanel.prototype, \"templates\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], TabPanel.prototype, \"selected\", null);\n    TabPanel = __decorate([\n        core_1.Component({\n            selector: 'p-tabPanel',\n            template: \"\\n        <div [attr.id]=\\\"id\\\" class=\\\"ui-tabview-panel ui-widget-content\\\" [ngClass]=\\\"{'ui-helper-hidden': !selected}\\\"\\n            role=\\\"tabpanel\\\" [attr.aria-hidden]=\\\"!selected\\\" [attr.aria-labelledby]=\\\"id + '-label'\\\" *ngIf=\\\"!closed\\\">\\n            <ng-content></ng-content>\\n            <ng-container *ngIf=\\\"contentTemplate && (cache ? loaded : selected)\\\">\\n                <ng-container *ngTemplateOutlet=\\\"contentTemplate\\\"></ng-container>\\n            </ng-container>\\n        </div>\\n    \"\n        })\n    ], TabPanel);\n    return TabPanel;\n}());\nexports.TabPanel = TabPanel;\nvar TabView = /** @class */ /*@__PURE__*/ (function () {\n    function TabView(el) {\n        this.el = el;\n        this.orientation = 'top';\n        this.onChange = new core_1.EventEmitter();\n        this.onClose = new core_1.EventEmitter();\n        this.activeIndexChange = new core_1.EventEmitter();\n    }\n    TabView.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.initTabs();\n        this.tabPanels.changes.subscribe(function (_) {\n            _this.initTabs();\n        });\n    };\n    TabView.prototype.initTabs = function () {\n        this.tabs = this.tabPanels.toArray();\n        var selectedTab = this.findSelectedTab();\n        if (!selectedTab && this.tabs.length) {\n            if (this.activeIndex != null && this.tabs.length > this.activeIndex)\n                this.tabs[this.activeIndex].selected = true;\n            else\n                this.tabs[0].selected = true;\n        }\n    };\n    TabView.prototype.open = function (event, tab) {\n        if (tab.disabled) {\n            if (event) {\n                event.preventDefault();\n            }\n            return;\n        }\n        if (!tab.selected) {\n            var selectedTab = this.findSelectedTab();\n            if (selectedTab) {\n                selectedTab.selected = false;\n            }\n            tab.selected = true;\n            var selectedTabIndex = this.findTabIndex(tab);\n            this.preventActiveIndexPropagation = true;\n            this.activeIndexChange.emit(selectedTabIndex);\n            this.onChange.emit({ originalEvent: event, index: selectedTabIndex });\n        }\n        if (event) {\n            event.preventDefault();\n        }\n    };\n    TabView.prototype.close = function (event, tab) {\n        var _this = this;\n        if (this.controlClose) {\n            this.onClose.emit({\n                originalEvent: event,\n                index: this.findTabIndex(tab),\n                close: function () {\n                    _this.closeTab(tab);\n                }\n            });\n        }\n        else {\n            this.closeTab(tab);\n            this.onClose.emit({\n                originalEvent: event,\n                index: this.findTabIndex(tab)\n            });\n        }\n        event.stopPropagation();\n    };\n    TabView.prototype.closeTab = function (tab) {\n        if (tab.disabled) {\n            return;\n        }\n        if (tab.selected) {\n            tab.selected = false;\n            for (var i = 0; i < this.tabs.length; i++) {\n                var tabPanel = this.tabs[i];\n                if (!tabPanel.closed && !tab.disabled) {\n                    tabPanel.selected = true;\n                    break;\n                }\n            }\n        }\n        tab.closed = true;\n    };\n    TabView.prototype.findSelectedTab = function () {\n        for (var i = 0; i < this.tabs.length; i++) {\n            if (this.tabs[i].selected) {\n                return this.tabs[i];\n            }\n        }\n        return null;\n    };\n    TabView.prototype.findTabIndex = function (tab) {\n        var index = -1;\n        for (var i = 0; i < this.tabs.length; i++) {\n            if (this.tabs[i] == tab) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    };\n    TabView.prototype.getBlockableElement = function () {\n        return this.el.nativeElement.children[0];\n    };\n    Object.defineProperty(TabView.prototype, \"activeIndex\", {\n        get: function () {\n            return this._activeIndex;\n        },\n        set: function (val) {\n            this._activeIndex = val;\n            if (this.preventActiveIndexPropagation) {\n                this.preventActiveIndexPropagation = false;\n                return;\n            }\n            if (this.tabs && this.tabs.length && this._activeIndex != null && this.tabs.length > this._activeIndex) {\n                this.findSelectedTab().selected = false;\n                this.tabs[this._activeIndex].selected = true;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabView.prototype, \"orientation\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], TabView.prototype, \"style\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], TabView.prototype, \"styleClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], TabView.prototype, \"controlClose\", void 0);\n    __decorate([\n        core_1.ContentChildren(TabPanel),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], TabView.prototype, \"tabPanels\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TabView.prototype, \"onChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TabView.prototype, \"onClose\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], TabView.prototype, \"activeIndexChange\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], TabView.prototype, \"activeIndex\", null);\n    TabView = __decorate([\n        core_1.Component({\n            selector: 'p-tabView',\n            template: \"\\n        <div [ngClass]=\\\"'ui-tabview ui-widget ui-widget-content ui-corner-all ui-tabview-' + orientation\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <ul p-tabViewNav role=\\\"tablist\\\" *ngIf=\\\"orientation!='bottom'\\\" [tabs]=\\\"tabs\\\" [orientation]=\\\"orientation\\\"\\n                (onTabClick)=\\\"open($event.originalEvent, $event.tab)\\\" (onTabCloseClick)=\\\"close($event.originalEvent, $event.tab)\\\"></ul>\\n            <div class=\\\"ui-tabview-panels\\\">\\n                <ng-content></ng-content>\\n            </div>\\n            <ul p-tabViewNav role=\\\"tablist\\\" *ngIf=\\\"orientation=='bottom'\\\" [tabs]=\\\"tabs\\\" [orientation]=\\\"orientation\\\"\\n                (onTabClick)=\\\"open($event.originalEvent, $event.tab)\\\" (onTabCloseClick)=\\\"close($event.originalEvent, $event.tab)\\\"></ul>\\n        </div>\\n    \",\n        })\n    ], TabView);\n    return TabView;\n}());\nexports.TabView = TabView;\nvar TabViewModule = /** @class */ /*@__PURE__*/ (function () {\n    function TabViewModule() {\n    }\n    TabViewModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, shared_1.SharedModule],\n            exports: [TabView, TabPanel, TabViewNav, shared_1.SharedModule],\n            declarations: [TabView, TabPanel, TabViewNav]\n        })\n    ], TabViewModule);\n    return TabViewModule;\n}());\nexports.TabViewModule = TabViewModule;\n",null]}
{"remainingRequest":"C:\\AngularProject\\appsecurite5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\AngularProject\\appsecurite5\\node_modules\\primeng\\components\\spinner\\spinner.js","dependencies":[{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\primeng\\components\\spinner\\spinner.js","mtime":1531393534000},{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531413946556},{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar inputtext_1 = require(\"../inputtext/inputtext\");\nvar domhandler_1 = require(\"../dom/domhandler\");\nvar forms_1 = require(\"@angular/forms\");\nexports.SPINNER_VALUE_ACCESSOR = {\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return Spinner; }),\n    multi: true\n};\nvar Spinner = /** @class */ /*@__PURE__*/ (function () {\n    function Spinner(el, domHandler) {\n        this.el = el;\n        this.domHandler = domHandler;\n        this.onChange = new core_1.EventEmitter();\n        this.onFocus = new core_1.EventEmitter();\n        this.onBlur = new core_1.EventEmitter();\n        this.step = 1;\n        this.decimalSeparator = '.';\n        this.thousandSeparator = ',';\n        this.formatInput = true;\n        this.type = 'text';\n        this.valueAsString = '';\n        this.onModelChange = function () { };\n        this.onModelTouched = function () { };\n        this.keyPattern = /[0-9\\+\\-]/;\n        this.negativeSeparator = '-';\n    }\n    Spinner.prototype.ngOnInit = function () {\n        if (Math.floor(this.step) === 0) {\n            this.precision = this.step.toString().split(/[,]|[.]/)[1].length;\n        }\n    };\n    Spinner.prototype.repeat = function (event, interval, dir) {\n        var _this = this;\n        var i = interval || 500;\n        this.clearTimer();\n        this.timer = setTimeout(function () {\n            _this.repeat(event, 40, dir);\n        }, i);\n        this.spin(event, dir);\n    };\n    Spinner.prototype.spin = function (event, dir) {\n        var step = this.step * dir;\n        var currentValue = this.value || 0;\n        var newValue = null;\n        if (this.precision)\n            this.value = parseFloat(this.toFixed(currentValue + step, this.precision));\n        else\n            this.value = currentValue + step;\n        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n            this.value = currentValue;\n        }\n        if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        }\n        this.formatValue();\n        this.onModelChange(this.value);\n        this.onChange.emit(event);\n    };\n    Spinner.prototype.toFixed = function (value, precision) {\n        var power = Math.pow(10, precision || 0);\n        return String(Math.round(value * power) / power);\n    };\n    Spinner.prototype.onUpButtonMousedown = function (event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, 1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    };\n    Spinner.prototype.onUpButtonMouseup = function (event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    };\n    Spinner.prototype.onUpButtonMouseleave = function (event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    };\n    Spinner.prototype.onDownButtonMousedown = function (event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, -1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    };\n    Spinner.prototype.onDownButtonMouseup = function (event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    };\n    Spinner.prototype.onDownButtonMouseleave = function (event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    };\n    Spinner.prototype.onInputKeydown = function (event) {\n        if (event.which == 38) {\n            this.spin(event, 1);\n            event.preventDefault();\n        }\n        else if (event.which == 40) {\n            this.spin(event, -1);\n            event.preventDefault();\n        }\n    };\n    Spinner.prototype.onInputKeyPress = function (event) {\n        var inputChar = String.fromCharCode(event.charCode);\n        if (!this.keyPattern.test(inputChar) && inputChar != this.decimalSeparator && event.keyCode != 9 && event.keyCode != 8 && event.keyCode != 37 && event.keyCode != 39 && event.keyCode != 46) {\n            event.preventDefault();\n        }\n    };\n    Spinner.prototype.onInputKeyup = function (event) {\n        this.decimalSeparatorRegEx = this.decimalSeparatorRegEx || new RegExp(this.decimalSeparator === '.' ? '\\\\.' : this.decimalSeparator, \"g\");\n        var inputValue = event.target.value.trim();\n        this.value = this.parseValue(inputValue);\n        if (this.shouldFormat(inputValue)) {\n            this.formatValue();\n        }\n        this.onModelChange(this.value);\n        this.updateFilledState();\n    };\n    Spinner.prototype.shouldFormat = function (value) {\n        if (this.negativeSeparator === value) {\n            return false;\n        }\n        if (!this.domHandler.isInteger(this.step) && (value.match(this.decimalSeparatorRegEx) || []).length === 1 && value.indexOf(this.decimalSeparator) === value.length - 1) {\n            return false;\n        }\n        return true;\n    };\n    Spinner.prototype.onInputBlur = function (event) {\n        this.focus = false;\n        this.restrictValue();\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    };\n    Spinner.prototype.onInputFocus = function (event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    };\n    Spinner.prototype.parseValue = function (val) {\n        var value;\n        if (this.formatInput) {\n            val = val.split(this.thousandSeparator).join('');\n        }\n        if (val.trim() === '') {\n            value = null;\n        }\n        else {\n            if (this.precision) {\n                value = parseFloat(val.replace(',', '.'));\n            }\n            else {\n                value = parseInt(val);\n            }\n            if (isNaN(value)) {\n                value = null;\n            }\n        }\n        return value;\n    };\n    Spinner.prototype.restrictValue = function () {\n        var restricted;\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n            restricted = true;\n        }\n        if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n            restricted = true;\n        }\n        if (restricted) {\n            this.onModelChange(this.value);\n            this.formatValue();\n        }\n    };\n    Spinner.prototype.formatValue = function () {\n        if (this.value !== null && this.value !== undefined) {\n            var textValue = String(this.value).replace('.', this.decimalSeparator);\n            if (this.formatInput) {\n                var parts = textValue.split(this.decimalSeparator);\n                parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.thousandSeparator);\n                textValue = parts.join(this.decimalSeparator);\n            }\n            this.valueAsString = textValue;\n        }\n        else {\n            this.valueAsString = '';\n        }\n        this.inputfieldViewChild.nativeElement.value = this.valueAsString;\n    };\n    Spinner.prototype.handleChange = function (event) {\n        this.onChange.emit(event);\n    };\n    Spinner.prototype.clearTimer = function () {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    };\n    Spinner.prototype.writeValue = function (value) {\n        this.value = value;\n        this.formatValue();\n        this.updateFilledState();\n    };\n    Spinner.prototype.registerOnChange = function (fn) {\n        this.onModelChange = fn;\n    };\n    Spinner.prototype.registerOnTouched = function (fn) {\n        this.onModelTouched = fn;\n    };\n    Spinner.prototype.setDisabledState = function (val) {\n        this.disabled = val;\n    };\n    Spinner.prototype.updateFilledState = function () {\n        this.filled = (this.value !== undefined && this.value != null);\n    };\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Spinner.prototype, \"onChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Spinner.prototype, \"onFocus\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Spinner.prototype, \"onBlur\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Spinner.prototype, \"step\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Spinner.prototype, \"min\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Spinner.prototype, \"max\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Spinner.prototype, \"maxlength\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Spinner.prototype, \"size\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"placeholder\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"inputId\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Spinner.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Spinner.prototype, \"readonly\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"decimalSeparator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"thousandSeparator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], Spinner.prototype, \"tabindex\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Spinner.prototype, \"formatInput\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"type\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Spinner.prototype, \"required\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"name\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"inputStyle\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Spinner.prototype, \"inputStyleClass\", void 0);\n    __decorate([\n        core_1.ViewChild('inputfield'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], Spinner.prototype, \"inputfieldViewChild\", void 0);\n    Spinner = __decorate([\n        core_1.Component({\n            selector: 'p-spinner',\n            template: \"\\n        <span class=\\\"ui-spinner ui-widget ui-corner-all\\\">\\n            <input #inputfield [attr.type]=\\\"type\\\" [attr.id]=\\\"inputId\\\" [value]=\\\"valueAsString\\\" [attr.name]=\\\"name\\\"\\n            [attr.size]=\\\"size\\\" [attr.maxlength]=\\\"maxlength\\\" [attr.tabindex]=\\\"tabindex\\\" [attr.placeholder]=\\\"placeholder\\\" [disabled]=\\\"disabled\\\" [attr.readonly]=\\\"readonly\\\" [attr.required]=\\\"required\\\"\\n            (keydown)=\\\"onInputKeydown($event)\\\" (keyup)=\\\"onInputKeyup($event)\\\" (keypress)=\\\"onInputKeyPress($event)\\\" (blur)=\\\"onInputBlur($event)\\\" (change)=\\\"handleChange($event)\\\" (focus)=\\\"onInputFocus($event)\\\"\\n            [ngStyle]=\\\"inputStyle\\\" [class]=\\\"inputStyleClass\\\" [ngClass]=\\\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\\\">\\n            <button type=\\\"button\\\" [ngClass]=\\\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\\\" [disabled]=\\\"disabled\\\" [attr.readonly]=\\\"readonly\\\"\\n                (mouseleave)=\\\"onUpButtonMouseleave($event)\\\" (mousedown)=\\\"onUpButtonMousedown($event)\\\" (mouseup)=\\\"onUpButtonMouseup($event)\\\">\\n                <span class=\\\"ui-spinner-button-icon pi pi-caret-up ui-clickable\\\"></span>\\n            </button>\\n            <button type=\\\"button\\\" [ngClass]=\\\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\\\" [disabled]=\\\"disabled\\\" [attr.readonly]=\\\"readonly\\\"\\n                (mouseleave)=\\\"onDownButtonMouseleave($event)\\\" (mousedown)=\\\"onDownButtonMousedown($event)\\\" (mouseup)=\\\"onDownButtonMouseup($event)\\\">\\n                <span class=\\\"ui-spinner-button-icon pi pi-caret-down ui-clickable\\\"></span>\\n            </button>\\n        </span>\\n    \",\n            host: {\n                '[class.ui-inputwrapper-filled]': 'filled',\n                '[class.ui-inputwrapper-focus]': 'focus'\n            },\n            providers: [domhandler_1.DomHandler, exports.SPINNER_VALUE_ACCESSOR]\n        })\n    ], Spinner);\n    return Spinner;\n}());\nexports.Spinner = Spinner;\nvar SpinnerModule = /** @class */ /*@__PURE__*/ (function () {\n    function SpinnerModule() {\n    }\n    SpinnerModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, inputtext_1.InputTextModule],\n            exports: [Spinner],\n            declarations: [Spinner]\n        })\n    ], SpinnerModule);\n    return SpinnerModule;\n}());\nexports.SpinnerModule = SpinnerModule;\n",null]}
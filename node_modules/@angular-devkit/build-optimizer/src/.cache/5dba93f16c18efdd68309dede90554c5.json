{"remainingRequest":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@ng-bootstrap\\ng-bootstrap\\datepicker\\datepicker-tools.js","dependencies":[{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@ng-bootstrap\\ng-bootstrap\\datepicker\\datepicker-tools.js","mtime":1563198665571},{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1563198691178},{"path":"D:\\Development\\AngularProject\\appsecurite6\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1563198608965}],"contextDependencies":[],"result":["import { NgbDate } from './ngb-date';\r\nimport { isDefined } from '../util/util';\r\nexport function isChangedDate(prev, next) {\r\n    return !dateComparator(prev, next);\r\n}\r\nexport function dateComparator(prev, next) {\r\n    return (!prev && !next) || (!!prev && !!next && prev.equals(next));\r\n}\r\nexport function checkMinBeforeMax(minDate, maxDate) {\r\n    if (maxDate && minDate && maxDate.before(minDate)) {\r\n        throw new Error(\"'maxDate' \" + maxDate + \" should be greater than 'minDate' \" + minDate);\r\n    }\r\n}\r\nexport function checkDateInRange(date, minDate, maxDate) {\r\n    if (date && minDate && date.before(minDate)) {\r\n        return NgbDate.from(minDate);\r\n    }\r\n    if (date && maxDate && date.after(maxDate)) {\r\n        return NgbDate.from(maxDate);\r\n    }\r\n    return date;\r\n}\r\nexport function isDateSelectable(date, minDate, maxDate, isDisabled, markDisabled) {\r\n    // clang-format off\r\n    return !(!isDefined(date) ||\r\n        isDisabled ||\r\n        (markDisabled && markDisabled(date, { year: date.year, month: date.month })) ||\r\n        (minDate && date.before(minDate)) ||\r\n        (maxDate && date.after(maxDate)));\r\n    // clang-format on\r\n}\r\nexport function buildMonths(calendar, months, date, minDate, maxDate, displayMonths, firstDayOfWeek, markDisabled, force) {\r\n    var newMonths = [];\r\n    var _loop_1 = function (i) {\r\n        var newDate = calendar.getNext(date, 'm', i);\r\n        var index = months.findIndex(function (month) { return month.firstDate.equals(newDate); });\r\n        if (force || index === -1) {\r\n            newMonths.push(buildMonth(calendar, newDate, minDate, maxDate, firstDayOfWeek, markDisabled));\r\n        }\r\n        else {\r\n            newMonths.push(months[index]);\r\n        }\r\n    };\r\n    for (var i = 0; i < displayMonths; i++) {\r\n        _loop_1(i);\r\n    }\r\n    return newMonths;\r\n}\r\nexport function buildMonth(calendar, date, minDate, maxDate, firstDayOfWeek, markDisabled) {\r\n    var month = { firstDate: null, lastDate: null, number: date.month, year: date.year, weeks: [], weekdays: [] };\r\n    date = getFirstViewDate(calendar, date, firstDayOfWeek);\r\n    // month has weeks\r\n    for (var week = 0; week < calendar.getWeeksPerMonth(); week++) {\r\n        var days = [];\r\n        // week has days\r\n        for (var day = 0; day < calendar.getDaysPerWeek(); day++) {\r\n            if (week === 0) {\r\n                month.weekdays.push(calendar.getWeekday(date));\r\n            }\r\n            var newDate = new NgbDate(date.year, date.month, date.day);\r\n            var nextDate = calendar.getNext(newDate);\r\n            // marking date as disabled\r\n            var disabled = !!((minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate)));\r\n            if (!disabled && markDisabled) {\r\n                disabled = markDisabled(newDate, { month: month.number, year: month.year });\r\n            }\r\n            // saving first date of the month\r\n            if (month.firstDate === null && newDate.month === month.number) {\r\n                month.firstDate = newDate;\r\n            }\r\n            // saving last date of the month\r\n            if (newDate.month === month.number && nextDate.month !== month.number) {\r\n                month.lastDate = newDate;\r\n            }\r\n            days.push({\r\n                date: newDate,\r\n                context: {\r\n                    date: { year: newDate.year, month: newDate.month, day: newDate.day },\r\n                    currentMonth: month.number,\r\n                    disabled: disabled,\r\n                    focused: false,\r\n                    selected: false\r\n                }\r\n            });\r\n            date = nextDate;\r\n        }\r\n        month.weeks.push({ number: calendar.getWeekNumber(days.map(function (day) { return NgbDate.from(day.date); }), firstDayOfWeek), days: days });\r\n    }\r\n    return month;\r\n}\r\nexport function getFirstViewDate(calendar, date, firstDayOfWeek) {\r\n    var currentMonth = date.month;\r\n    var today = new NgbDate(date.year, date.month, date.day);\r\n    var yesterday = calendar.getPrev(today);\r\n    var firstDayOfCurrentMonthIsAlsoFirstDayOfWeek = function () { return today.month !== yesterday.month && firstDayOfWeek === calendar.getWeekday(today); };\r\n    var reachedTheFirstDayOfTheLastWeekOfPreviousMonth = function () { return today.month !== currentMonth && firstDayOfWeek === calendar.getWeekday(today); };\r\n    // going back in time\r\n    while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {\r\n        today = new NgbDate(yesterday.year, yesterday.month, yesterday.day);\r\n        yesterday = calendar.getPrev(yesterday);\r\n    }\r\n    return today;\r\n}\r\n//# sourceMappingURL=datepicker-tools.js.map",null]}
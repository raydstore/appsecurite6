{"remainingRequest":"C:\\AngularProject\\appsecurite5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\AngularProject\\appsecurite5\\node_modules\\primeng\\components\\fieldset\\fieldset.js","dependencies":[{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\primeng\\components\\fieldset\\fieldset.js","mtime":1531393534000},{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531413946556},{"path":"C:\\AngularProject\\appsecurite5\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar animations_1 = require(\"@angular/animations\");\nvar common_1 = require(\"@angular/common\");\nvar shared_1 = require(\"../common/shared\");\nvar idx = 0;\nvar Fieldset = /** @class */ /*@__PURE__*/ (function () {\n    function Fieldset(el) {\n        this.el = el;\n        this.collapsed = false;\n        this.collapsedChange = new core_1.EventEmitter();\n        this.onBeforeToggle = new core_1.EventEmitter();\n        this.onAfterToggle = new core_1.EventEmitter();\n        this.id = \"ui-fieldset-\" + idx++;\n    }\n    Fieldset.prototype.toggle = function (event) {\n        if (this.animating) {\n            return false;\n        }\n        this.animating = true;\n        this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });\n        if (this.collapsed)\n            this.expand(event);\n        else\n            this.collapse(event);\n        this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });\n        event.preventDefault();\n    };\n    Fieldset.prototype.expand = function (event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    };\n    Fieldset.prototype.collapse = function (event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    };\n    Fieldset.prototype.getBlockableElement = function () {\n        return this.el.nativeElement.children[0];\n    };\n    Fieldset.prototype.onToggleDone = function (event) {\n        this.animating = false;\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Fieldset.prototype, \"legend\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Fieldset.prototype, \"toggleable\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], Fieldset.prototype, \"collapsed\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Fieldset.prototype, \"collapsedChange\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Fieldset.prototype, \"onBeforeToggle\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], Fieldset.prototype, \"onAfterToggle\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], Fieldset.prototype, \"style\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], Fieldset.prototype, \"styleClass\", void 0);\n    Fieldset = __decorate([\n        core_1.Component({\n            selector: 'p-fieldset',\n            template: \"\\n        <fieldset [attr.id]=\\\"id\\\" [ngClass]=\\\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\\\" [ngStyle]=\\\"style\\\" [class]=\\\"styleClass\\\">\\n            <legend class=\\\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\\\">\\n                <ng-container *ngIf=\\\"toggleable; else legendContent\\\">\\n                    <a href=\\\"#\\\" (click)=\\\"toggle($event)\\\" [attr.aria-controls]=\\\"id + '-content'\\\" [attr.aria-expanded]=\\\"!collapsed\\\" [attr.tabindex]=\\\"toggleable ? null : -1\\\">\\n                        <ng-container *ngTemplateOutlet=\\\"legendContent\\\"></ng-container>\\n                    </a>\\n                </ng-container>\\n                <ng-template #legendContent>\\n                    <span class=\\\"ui-fieldset-toggler pi\\\" *ngIf=\\\"toggleable\\\" [ngClass]=\\\"{'pi-minus': !collapsed,'pi-plus':collapsed}\\\"></span>\\n                    <span class=\\\"ui-fieldset-legend-text\\\">{{legend}}</span>\\n                    <ng-content select=\\\"p-header\\\"></ng-content>\\n                </ng-template>\\n            </legend>\\n            <div [attr.id]=\\\"id + '-content'\\\" class=\\\"ui-fieldset-content-wrapper\\\" [@fieldsetContent]=\\\"collapsed ? 'hidden' : 'visible'\\\" \\n                        [ngClass]=\\\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\\\" [attr.aria-hidden]=\\\"collapsed\\\"\\n                         (@fieldsetContent.done)=\\\"onToggleDone($event)\\\" role=\\\"region\\\">\\n                <div class=\\\"ui-fieldset-content\\\">\\n                    <ng-content></ng-content>\\n                </div>\\n            </div>\\n        </fieldset>\\n    \",\n            animations: [\n                animations_1.trigger('fieldsetContent', [\n                    animations_1.state('hidden', animations_1.style({\n                        height: '0px'\n                    })),\n                    animations_1.state('visible', animations_1.style({\n                        height: '*'\n                    })),\n                    animations_1.transition('visible => hidden', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),\n                    animations_1.transition('hidden => visible', animations_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\n                ])\n            ]\n        })\n    ], Fieldset);\n    return Fieldset;\n}());\nexports.Fieldset = Fieldset;\nvar FieldsetModule = /** @class */ /*@__PURE__*/ (function () {\n    function FieldsetModule() {\n    }\n    FieldsetModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule],\n            exports: [Fieldset, shared_1.SharedModule],\n            declarations: [Fieldset]\n        })\n    ], FieldsetModule);\n    return FieldsetModule;\n}());\nexports.FieldsetModule = FieldsetModule;\n",null]}